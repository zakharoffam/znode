import { Injectable, Logger } from "@nestjs/common";
import { Start, Update, On, Action, Hears } from "nestjs-telegraf";
import { Context } from "telegraf";
import { TeleramUpdateEntity } from "@znode/storage";

@Update()
@Injectable()
export class TelegramHelperBotService {

  @Start()
  public async startCommand(ctx: Context) {
    await TeleramUpdateEntity.addRecord(JSON.stringify(ctx.update));
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç!');
    await ctx.reply('üëã');
    Logger.log('–ù–æ–≤—ã–π —á–∞—Ç!', 'TelegramHelperBotService.startCommand()');
    await ctx.tg.sendMessage(1040890736, '–ö –±–æ—Ç—É –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!');
  }

  @On('message')
  public async messageCommand(ctx: Context) {
    await TeleramUpdateEntity.addRecord(JSON.stringify(ctx.update));
    Logger.log('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', 'TelegramHelperBotService.messageCommand()');
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç!');
    await ctx.reply('üëã');
    setTimeout(async () => {
      await ctx.reply('–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '4', callback_data: '4'}],
            [{ text: '8', callback_data: '8'}]
          ]
        }
      })
    }, 1000);
  }


  @Hears('ping')
  public async getMe(ctx: Context) {
    await ctx.reply('–ü–∏–Ω–≥ –ø—Ä–æ—Å—Ç–æ –ê–ì–û–ù–¨!!!');
  }


  @Action(['4', '8'])
  public async onAnswer(ctx: Context) {
    Logger.log('–ù–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!', 'TelegramHelperBotService.onAnswer()');
    if ("callback_query" in ctx.update) {
      const query = ctx.update.callback_query;
      const userAnswer = 'data' in query ? query.data : null;

      await ctx.reply('–¢—É—Ç –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...');
      await ctx.reply('ü§î');
      await ctx.tg.sendChatAction(1040890736, 'typing');

      if (userAnswer === '4') {
        setTimeout(async () => {
          await ctx.reply('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
          await ctx.reply('ü•≥');
        }, 2500);
        setTimeout(async () => {
          await ctx.reply('–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ø–∏–Ω–≥–æ–≤–∞—Ç—å –º–µ–Ω—è. ;)');
        }, 5000);
        setTimeout(async () => {
          await ctx.reply('–Ø –∑–∞–ø–∏–Ω–≥—É—é—Å—å –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É "ping".');
        }, 5000);
      } else {
        setTimeout(async () => {
          await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –Ω–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.');
          await ctx.reply('ü§™');
        }, 1000);
      }
    }
  }
}
