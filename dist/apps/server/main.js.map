{"version":3,"file":"main.js","mappings":"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","sources":["webpack://znode/./apps/server/src/app.module.ts","webpack://znode/./libs/auth/server-module/src/index.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.controller.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.middleware.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.module.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.service.ts","webpack://znode/./libs/auth/server-module/src/lib/current-user.decarator.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-in.dto.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-up.dto.ts","webpack://znode/./libs/common/interfaces/src/index.ts","webpack://znode/./libs/event-logger/src/index.ts","webpack://znode/./libs/event-logger/src/lib/dto/event-logger-record.dto.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.controller.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.module.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.service.ts","webpack://znode/./libs/storage/src/index.ts","webpack://znode/./libs/storage/src/lib/entities/event-logger-record.entity.ts","webpack://znode/./libs/storage/src/lib/entities/role.entity.ts","webpack://znode/./libs/storage/src/lib/entities/teleram-update.entity.ts","webpack://znode/./libs/storage/src/lib/entities/user-password.entity.ts","webpack://znode/./libs/storage/src/lib/entities/user.entity.ts","webpack://znode/./libs/storage/src/lib/storage.module.ts","webpack://znode/./libs/telegram/helper-bot/src/index.ts","webpack://znode/./libs/telegram/helper-bot/src/lib/telegram-helper-bot.module.ts","webpack://znode/./libs/telegram/helper-bot/src/lib/telegram-helper-bot.service.ts","webpack://znode/./libs/users/server-module/src/index.ts","webpack://znode/./libs/users/server-module/src/lib/dto/create-user.dto.ts","webpack://znode/./libs/users/server-module/src/lib/users.controller.ts","webpack://znode/./libs/users/server-module/src/lib/users.module.ts","webpack://znode/./libs/users/server-module/src/lib/users.service.ts","webpack://znode/./ormconfig.ts","webpack://znode/external commonjs \"@nestjs/common\"","webpack://znode/external commonjs \"@nestjs/config\"","webpack://znode/external commonjs \"@nestjs/core\"","webpack://znode/external commonjs \"@nestjs/jwt\"","webpack://znode/external commonjs \"@nestjs/schedule\"","webpack://znode/external commonjs \"@nestjs/serve-static\"","webpack://znode/external commonjs \"@nestjs/typeorm\"","webpack://znode/external commonjs \"argon2\"","webpack://znode/external commonjs \"class-validator\"","webpack://znode/external commonjs \"express\"","webpack://znode/external commonjs \"nestjs-telegraf\"","webpack://znode/external commonjs \"telegraf\"","webpack://znode/external commonjs \"tslib\"","webpack://znode/external commonjs \"typeorm\"","webpack://znode/external node-commonjs \"path\"","webpack://znode/webpack/bootstrap","webpack://znode/./apps/server/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { StorageModule } from '@znode/storage';\nimport { AuthModule } from '@znode/auth-server-module';\nimport { UsersModule } from \"@znode/users/server-module\";\nimport { EventLoggerModule } from '@znode/event-logger';\nimport { TelegramHelperBotModule } from \"@znode/telegram/helper-bot\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n    ScheduleModule.forRoot(),\n    StorageModule,\n    EventLoggerModule,\n    AuthModule,\n    UsersModule,\n    TelegramHelperBotModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","export * from './lib/auth.module';\nexport * from './lib/current-user.decarator';\nexport * from './lib/sign-in.dto';\n","import { Body, Controller, Get, Post, Res, } from '@nestjs/common';\nimport { Response } from 'express';\nimport { SignInDto } from './sign-in.dto';\nimport { CurrentUser } from './current-user.decarator';\nimport { AuthService } from \"./auth.service\";\nimport { UserEntity } from \"@znode/storage\";\nimport { SignUpDto } from \"./sign-up.dto\";\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Войти\n   * @url /api/auth/sign-in\n   * @param response\n   * @param data\n   */\n  @Post('sign-in')\n  public async signIn(@Body() data: SignInDto, @Res() response: Response) {\n    const user = await this.authService.checkEmailAndPassword(data.email, data.password);\n    const token = this.authService.encryptJwt(user);\n    response.setHeader('Authorization', `Bearer ${token}`);\n    response.send({\n      token: token,\n      user: user,\n    });\n    response.end();\n  }\n\n\n  /**\n   * Регистрация нового пользователя\n   * @param data\n   */\n  @Post('sign-up')\n  public async signUp(@Body() data: SignUpDto) {\n    return await UserEntity.createUser(data.email, data.name, data.password);\n  }\n\n\n  /**\n   * Метод возвращает данные текущего пользователя пользователя\n   * @url /api/auth/current-user\n   * @param user\n   * @private\n   */\n  @Get('current-user')\n  public getUser(@CurrentUser() user: UserInterface): UserInterface {\n    return user;\n  }\n}\n","import { Injectable, Logger, NestMiddleware, UnauthorizedException } from '@nestjs/common';\nimport { NextFunction } from 'express';\nimport { AuthService } from './auth.service';\nimport { UserEntity } from \"@znode/storage\";\nimport { Request, Response } from 'express';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\ninterface RequestWithUser extends Request {\n  user: UserInterface;\n}\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Промежуточный обработчик аутентификации пользователя\n   * @param req\n   * @param res\n   * @param next\n   */\n  async use(req: RequestWithUser, res: Response, next: NextFunction) {\n    const auth = req.headers['Authorization'];\n    Logger.log(auth);\n    if (!auth) {\n      // Если в запросе нет токена авторизации отправим клиента на страницу авторизации\n      throw new UnauthorizedException();\n    }\n    // Извлечем токен из заголовка авторизации\n    const inputToken = String(auth).replace('Bearer ', '');\n\n    // Расшифруем полученный токен\n    const decodeToken = this.authService.decryptJwt(inputToken);\n    if (!decodeToken?.user?.email) {\n      // Если в расшифрованном токене отсутствуют пользовательские данные токен явно поддельный\n      throw new UnauthorizedException();\n    }\n    let user = decodeToken.user;\n\n    if (Date.now() > Number(String(decodeToken.exp) + '000')) {\n      // Если срок действия токена просрочен, запросим новый токен и пользовательские данные\n      user = await UserEntity.getUserByEmail(decodeToken.user.email);\n      const newToken = this.authService.encryptJwt(user);\n      // Обновим токен клиенту\n      res.setHeader('Authorization', `Bearer ${newToken}`);\n    }\n    req.user = user;\n    next();\n  }\n}\n","import { MiddlewareConsumer, Module, NestModule, RequestMethod, } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthController } from './auth.controller';\nimport { AuthMiddleware } from './auth.middleware';\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, UserPasswordEntity]),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '180s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): any {\n    consumer\n      .apply(AuthMiddleware)\n      .exclude(\n        { path: 'api/auth/sign-in', method: RequestMethod.POST },\n        { path: 'api/users', method: RequestMethod.POST },\n      )\n      .forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n}\n","import { ForbiddenException, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { UserInterface } from \"@znode/common/interfaces\";\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { JwtService } from \"@nestjs/jwt\";\n\n\nexport interface Token {\n  user: UserInterface;\n  iat: number;\n  exp: number;\n}\n\n\n@Injectable()\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n\n\n  /**\n   * Проверка адреса электропочты и пароля\n   * @param email\n   * @param password\n   */\n  public async checkEmailAndPassword(email: string, password: string): Promise<UserInterface> {\n    const user = await UserEntity.findOne({ where: { email: email }});\n    if (!user) {\n      throw new UnauthorizedException(`${email} не зарегистрирован!`, `AuthLocalStrategy.validate()`);\n    }\n    const checkPassword = await UserPasswordEntity.isPasswordOfUser(user, password);\n    if (!checkPassword) {\n      throw new UnauthorizedException(`Неверный пароль!`, `AuthLocalStrategy.validate()`);\n    }\n    if (!user.isActive) {\n      throw new ForbiddenException(`Доступ запрещен!`, `AuthLocalStrategy.validate()`);\n    }\n    return user;\n  }\n\n\n  /**\n   * Зашифровать токен JWT\n   * @param user\n   */\n  public encryptJwt(user: UserInterface): string {\n    const payload = { user };\n    return this.jwtService.sign(payload);\n  }\n\n\n  /**\n   * Расшифровать токен JWT\n   * @param token\n   */\n  public decryptJwt(token: string): Token {\n    return this.jwtService.verify<Token>(token);\n  }\n}\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n/**\n * Декоратор возвращающий данные текущего пользователя\n */\nexport const CurrentUser = createParamDecorator(\n  (ctx: ExecutionContext): UserInterface => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  }\n);\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignUpDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  name: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","export * from './lib/user.interface';\n","export * from './lib/event-logger.module';\nexport * from './lib/event-logger.service';\nexport * from './lib/dto/event-logger-record.dto';","import { RecordTypes } from \"@znode/storage\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nexport class EventLoggerRecordDto {\n  @IsEnum(RecordTypes)\n  type: RecordTypes;\n\n  @IsString()\n  message: string;\n\n  @IsOptional()\n  @IsString()\n  context?: string;\n}","import { Body, Controller, Get, Post } from \"@nestjs/common\";\nimport { EventLoggerRecordEntity } from \"@znode/storage\";\nimport { EventLoggerRecordDto } from \"./dto/event-logger-record.dto\";\n\n@Controller('event-logger')\nexport class EventLoggerController {\n  /**\n   * Добавить запись в журнал событий\n   * @url /api/event-logger/record\n   * @param body EventLoggerRecordDto\n   * @returns EventLoggerRecordEntity\n   */\n  @Post('records')\n  private async postRecord(@Body() body: EventLoggerRecordDto): Promise<EventLoggerRecordEntity> {\n    return await EventLoggerRecordEntity.addRecord(body.type, body.message, body.context);\n  }\n\n\n  /**\n   * Получить все записи журнала событий\n   * @returns EventLoggerRecordEntity[]\n   */\n  @Get('records')\n  private async getRecords(): Promise<EventLoggerRecordEntity[]> {\n    return await EventLoggerRecordEntity.find();\n  }\n}","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventLoggerRecordEntity } from '@znode/storage';\nimport { EventLoggerController } from './event-logger.controller';\nimport { EventLoggerService } from './event-logger.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([EventLoggerRecordEntity])],\n  controllers: [EventLoggerController],\n  providers: [EventLoggerService],\n  exports: [EventLoggerService],\n})\nexport class EventLoggerModule {}\n","import { ConsoleLogger, Injectable } from \"@nestjs/common\";\nimport { EventLoggerRecordEntity, RecordTypes } from \"@znode/storage\";\n\n@Injectable()\nexport class EventLoggerService extends ConsoleLogger {\n  private stdout(message: string, context?: string) {\n    console.log('EVENT LOGGER');\n    console.log('timestamp: ' + new Date().toISOString());\n    console.log('context: ' + context);\n    console.log('message: ' + message);\n    console.log();\n  }\n\n\n  log(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.log, message, context);\n  }\n\n  warn(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.warn, message, context);\n  }\n\n  erroe(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.error, message, context);\n  }\n\n  verbose(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.verbose, message, context);\n  }\n\n  debug(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.debug, message, context);\n  }\n}","export * from './lib/storage.module';\n\n// Сущности\nexport * from './lib/entities/user.entity';\nexport * from './lib/entities/user-password.entity';\nexport * from './lib/entities/role.entity';\nexport * from './lib/entities/event-logger-record.entity';\nexport * from './lib/entities/teleram-update.entity';\n","import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\nexport enum RecordTypes {\n  log = 'log',\n  warn = 'warn',\n  error = 'error',\n  verbose = 'verbose',\n  debug = 'debug'\n}\n\n/**\n * Запись журнала событий\n */\n@Entity()\nexport class EventLoggerRecordEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @CreateDateColumn()\n  timestamp: string;\n\n  @Column({ type: 'varchar', nullable: false, enum: RecordTypes })\n  type: RecordTypes;\n\n  @Column({ type: 'varchar', nullable: false })\n  message: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  context: string | null;\n\n  \n  /**\n   * Добавить запись в журнал событий\n   * @param type Тип записи\n   * @param message Сообщение\n   * @param context Контекст в котором вызывается метод\n   * @returns \n   */\n  static async addRecord(type: RecordTypes, message: string, context?: string): Promise<EventLoggerRecordEntity> {\n    let record = new EventLoggerRecordEntity();\n    record.type = type;\n    record.message = message;\n    record.context = context ?? null;\n    record = await this.save(record);\n    return record;\n  }\n}","import { BaseEntity, Column, Entity, ManyToMany, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { IsString, Length } from \"class-validator\";\nimport { UserEntity } from \"./user.entity\";\n\n@Entity('Roles')\nexport class RoleEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @IsString()\n  @Length(1, 50)\n  @Column({ type: 'varchar', length: 50, unique: true, nullable: false })\n  title: string;\n\n  @ManyToMany(() => UserEntity, user => user.roles)\n  users: UserEntity[];\n}\n","import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity('Telegram_update')\nexport class TeleramUpdateEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @CreateDateColumn()\n  timestamp: Date;\n\n  @Column({ type: 'varchar' })\n  message: string;\n\n\n  /**\n   * Добавить запись\n   * @param message\n   */\n  static async addRecord(message: string): Promise<TeleramUpdateEntity> {\n    let record = new TeleramUpdateEntity();\n    record.message = message;\n    record = await this.save(record);\n    return record;\n  }\n}\n","import { BaseEntity, Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport * as argon2 from \"argon2\";\nimport { UserEntity } from \"./user.entity\";\nimport { BadRequestException } from \"@nestjs/common\";\n\n@Entity('User_password')\nexport class UserPasswordEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToOne(() => UserEntity, user => user.password)\n  @JoinColumn()\n  user: UserEntity;\n\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  passwordHashed: string;\n\n\n  /**\n   * Установить пароля пользователя\n   * @param user\n   * @param password\n   */\n  static async setPassword(user: UserEntity, password: string): Promise<void> {\n    if (password.length < 8 || password.length > 64) {\n      throw new BadRequestException(`Длина пароля должна быть от 8 до 64 символов!`, `UserPasswordEntity.setPassword()`);\n    }\n    let userPassword = await this.findOne({ where: { user: user }});\n    if (userPassword) {\n      userPassword.passwordHashed = await argon2.hash(password);\n      await this.save(userPassword);\n      return;\n    }\n    userPassword = new UserPasswordEntity();\n    userPassword.user = user;\n    userPassword.passwordHashed = await argon2.hash(password);\n    return;\n  }\n\n\n  /**\n   * Это пароль пользователя?\n   * @param user\n   * @param password\n   */\n  static async isPasswordOfUser(user: UserEntity, password: string): Promise<boolean> {\n    const entity = await this.findOne({ where: { user: user }});\n    if (!entity) return false;\n    return await argon2.verify(entity.passwordHashed, password);\n  }\n}\n","import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity, ManyToMany,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n  JoinTable\n} from \"typeorm\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, Length, validate } from \"class-validator\";\nimport { BadRequestException, ForbiddenException, Logger, UnauthorizedException } from \"@nestjs/common\";\nimport { UserPasswordEntity } from \"./user-password.entity\";\nimport { UserInterface } from \"../../../../common/interfaces/src\";\nimport { RoleEntity } from \"./role.entity\";\n\n\n@Entity('Users')\nexport class UserEntity extends BaseEntity {\n  @IsEmail()\n  @Length(1, 255)\n  @PrimaryColumn({ type: 'varchar', length: 255, unique: true })\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  @Column({ type: 'varchar', length: 255, unique: true, nullable: false })\n  name: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Column({ type: 'boolean', nullable: false, default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  createTimestamp: Date;\n\n  @UpdateDateColumn()\n  updateTimestamp: Date;\n\n  @OneToOne(() => UserPasswordEntity, password => password.user)\n  password: UserPasswordEntity;\n\n  @ManyToMany(() => RoleEntity, roles => roles.users)\n  @JoinTable()\n  roles: RoleEntity[];\n\n\n  /**\n   * Создание нового пользователя\n   * @param email\n   * @param name\n   * @param password\n   */\n  static async createUser(email: string, name: string, password: string): Promise<UserEntity> {\n    Logger.log(`Создание нового пользователя.`, `UserEntity.createUser(${email}, ${name})`);\n    const checkEmail = await this.findOne({ where: { email: email }});\n    if (checkEmail) {\n      Logger.warn(`${email} занят!`, `UserEntity.createUser(${email}, ${name})`);\n      throw new BadRequestException(`${email} занят!`);\n    }\n    const countUsersWithSameName = await this.count({ where: { name: name }});\n    let user = new UserEntity();\n    user.email = email;\n    user.name = !countUsersWithSameName ? name : `${name} - ${countUsersWithSameName + 1}`;\n    const validateUserDataErrors = await validate(user);\n    if (validateUserDataErrors.length) {\n      Logger.warn(`${validateUserDataErrors}`, `UserEntity.createUser(${email}, ${name})`);\n      throw new BadRequestException(validateUserDataErrors);\n    }\n    user = await this.save(user);\n    try {\n      await UserPasswordEntity.setPassword(user, password);\n    } catch (err) {\n      Logger.warn(`Пароль не прошел валидацию! Создание пользователя прервано!`, `UserEntity.createUser(${email}, ${name})`);\n      await this.delete(user);\n      throw new BadRequestException(err);\n    }\n\n    // Если это первый пользователь приложения - инициализируем новые роли и пользователя-админа\n    const currentUsersCount = await this.count();\n    if (currentUsersCount === 1) {\n      Logger.log(`Создан первый пользователь приложения.`, `UserEntity.createUser(${email}, ${name})`);\n      Logger.log(`Инициализируем ролевую модель и назначаем администратора!`, `UserEntity.createUser(${email}, ${name})`);\n      let roleAdmin = new RoleEntity();\n      roleAdmin.title = 'admin';\n      roleAdmin = await RoleEntity.save(roleAdmin);\n      Logger.log(`Создана роль \"Администратор\".`, `UserEntity.createUser(${email}, ${name})`);\n\n      const roleUser = new RoleEntity();\n      roleUser.title = 'user';\n      await RoleEntity.save(roleUser);\n      Logger.log(`Создана роль \"Пользователь\".`, `UserEntity.createUser(${email}, ${name})`);\n\n      user.roles = [roleAdmin];\n      await this.save(user);\n      Logger.log(`Пользователю ${name} присвоена роль \"Администратор\".`, `UserEntity.createUser(${email}, ${name})`);\n    }\n\n    const roleUser = await RoleEntity.findOne({ where: { title: 'user' }});\n    user.roles = [...user.roles, roleUser];\n    await this.save(user);\n    Logger.log(`Пользователю ${name} присвоена роль \"Пользователь\".`, `UserEntity.createUser(${email}, ${name})`);\n    Logger.log(`Пользователь ${name} успешно зарегистрирован.`, `UserEntity.createUser(${email}, ${name})`);\n    return user;\n  }\n\n\n  /**\n   * Получить пользователя по email\n   * @param email\n   */\n  static async getUserByEmail(email: string): Promise<UserInterface> {\n    const entity = await this.findOne({where: {email: email}});\n    if (!entity) {\n      throw new UnauthorizedException();\n    }\n    if (!entity?.isActive) {\n      throw new ForbiddenException();\n    }\n    return {\n      email: entity.email,\n      name: entity.name,\n    };\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport ormConfig from '../../../../ormconfig';\n\n@Module({ imports: [TypeOrmModule.forRoot(ormConfig)] })\nexport class StorageModule {}\n","export * from './lib/telegram-helper-bot.module';\n","import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { EventLoggerRecordEntity, TeleramUpdateEntity } from \"@znode/storage\";\nimport { TelegrafModule } from \"nestjs-telegraf\";\nimport { TelegramHelperBotService } from \"./telegram-helper-bot.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      EventLoggerRecordEntity,\n      TeleramUpdateEntity,\n    ]),\n    TelegrafModule.forRoot({\n      token: String(process.env.HELPER_BOT_TOKEN),\n    }),\n  ],\n  providers: [TelegramHelperBotService],\n})\nexport class TelegramHelperBotModule {}\n","import { Injectable, Logger } from \"@nestjs/common\";\nimport { Start, Update, On, Action, Hears } from \"nestjs-telegraf\";\nimport { Context } from \"telegraf\";\nimport { TeleramUpdateEntity } from \"@znode/storage\";\n\n@Update()\n@Injectable()\nexport class TelegramHelperBotService {\n\n  @Start()\n  public async startCommand(ctx: Context) {\n    await TeleramUpdateEntity.addRecord(JSON.stringify(ctx.update));\n    await ctx.reply('Привет!');\n    await ctx.reply('👋');\n    Logger.log('Новый чат!', 'TelegramHelperBotService.startCommand()');\n    await ctx.tg.sendMessage(1040890736, 'К боту подключился новый пользователь!');\n  }\n\n  @On('message')\n  public async messageCommand(ctx: Context) {\n    await TeleramUpdateEntity.addRecord(JSON.stringify(ctx.update));\n    Logger.log('Новое сообщение!', 'TelegramHelperBotService.messageCommand()');\n    await ctx.reply('Привет!');\n    await ctx.reply('👋');\n    setTimeout(async () => {\n      await ctx.reply('Сколько будет 2 + 2?', {\n        reply_markup: {\n          inline_keyboard: [\n            [{ text: '4', callback_data: '4'}],\n            [{ text: '8', callback_data: '8'}]\n          ]\n        }\n      })\n    }, 1000);\n  }\n\n\n  @Hears('ping')\n  public async getMe(ctx: Context) {\n    await ctx.reply('Пинг просто АГОНЬ!!!');\n  }\n\n\n  @Action(['4', '8'])\n  public async onAnswer(ctx: Context) {\n    Logger.log('Новое действие!', 'TelegramHelperBotService.onAnswer()');\n    if (\"callback_query\" in ctx.update) {\n      const query = ctx.update.callback_query;\n      const userAnswer = 'data' in query ? query.data : null;\n\n      await ctx.reply('Тут надо подумать...');\n      await ctx.reply('🤔');\n      await ctx.tg.sendChatAction(1040890736, 'typing');\n\n      if (userAnswer === '4') {\n        setTimeout(async () => {\n          await ctx.reply('Правильно!');\n          await ctx.reply('🥳');\n        }, 2500);\n        setTimeout(async () => {\n          await ctx.reply('Теперь ты можешь попробовать попинговать меня. ;)');\n        }, 5000);\n        setTimeout(async () => {\n          await ctx.reply('Я запингуюсь если отправить мне команду \"ping\".');\n        }, 5000);\n      } else {\n        setTimeout(async () => {\n          await ctx.reply('К сожалению это не верный ответ.');\n          await ctx.reply('🤪');\n        }, 1000);\n      }\n    }\n  }\n}\n","export * from './lib/users.module';\n\nexport * from './lib/dto/create-user.dto';\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  name: string;\n\n  @IsString()\n  @Length(7, 64)\n  password: string;\n}\n","import { Body, Controller, Get, Post } from \"@nestjs/common\";\nimport { UsersService } from \"./users.service\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\nimport { UserEntity } from \"@znode/storage\";\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Создание нового пользователя\n   * @url /api/users\n   * @param data\n   * @private\n   */\n  @Post()\n  private async createUser(@Body() data: CreateUserDto): Promise<UserEntity> {\n    return await this.usersService.createUser(data);\n  }\n\n  /**\n   * Получить список всех пользователей\n   * @url /api/users\n   * @private\n   */\n  @Get()\n  private async getAllUsers(): Promise<UserEntity[]> {\n    return await this.usersService.findAllUsers();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { RoleEntity } from \"@znode/storage\";\nimport { UsersController } from \"./users.controller\";\nimport { UsersService } from \"./users.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      UserEntity, UserPasswordEntity, RoleEntity,\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n","import { Injectable } from \"@nestjs/common\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\nimport { UserEntity } from \"@znode/storage\";\n\n@Injectable()\nexport class UsersService {\n  /**\n   * Создание пользователя\n   * @param data\n   */\n  public async createUser(data: CreateUserDto): Promise<UserEntity> {\n    return await UserEntity.createUser(data.email, data.name, data.password);\n  }\n\n  /**\n   * Найти всех пользователей\n   */\n  public async findAllUsers(): Promise<UserEntity[]> {\n    return UserEntity.find({ relations: ['roles'] });\n  }\n}\n","import { join } from 'path';\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\n\n/**\n * Конфигурация подключения к СУБД\n * Данная конфигурация используется как для работы в рантайме, так и для работы с TypeORM CLI\n */\nexport default ((): TypeOrmModuleOptions  => {\n  return {\n    type: 'postgres',\n    url: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n    autoLoadEntities: true,\n    synchronize: false,\n    retryAttempts: 1,\n    cli: {\n      migrationsDir: join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations'),\n    },\n    entities: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '*.entity.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '**', '*.entity.{ts,js}'),\n    ],\n    migrations: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations','*.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations', '**', '*.{ts,js}'),\n    ],\n    subscribers: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers','*.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers', '**', '*.{ts,js}'),\n    ],\n  }\n})();\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"argon2\");","module.exports = require(\"class-validator\");","module.exports = require(\"express\");","module.exports = require(\"nestjs-telegraf\");","module.exports = require(\"telegraf\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ConfigService } from '@nestjs/config';\nimport { EventLoggerService } from '@znode/event-logger';\n\nasync function bootstrap() {\n  // const app = await NestFactory.create(AppModule, {\n  //   bufferLogs: true,\n  //   logger: new EventLoggerService,\n  // });\n  const app = await NestFactory.create(AppModule);\n  const configService = app.get(ConfigService);\n  const port = configService.get<string | number>('PORT');\n  const globalPrefix = 'api';\n\n  // Инициализируем глобальный префикс для всех REST'ов\n  app.setGlobalPrefix(globalPrefix);\n\n  // Инициализируем глобальную валидацию всех входящих данных через DTO\n  app.useGlobalPipes(new ValidationPipe());\n\n  // Стартуем сервер\n  await app.listen(port);\n  Logger.log(`Сервер запущен в режиме \"${process.env.NODE_ENV}\" на: http://localhost:${port}/${globalPrefix}`);\n}\n\nbootstrap().catch((err) => {\n  Logger.error(`При запуске сервера возникла ошибка:`, `main.boostrap()`);\n  console.error(err);\n});\n"],"names":["AppModule","Module","imports","ConfigModule","forRoot","ServeStaticModule","rootPath","join","__dirname","ScheduleModule","StorageModule","EventLoggerModule","AuthModule","UsersModule","TelegramHelperBotModule","controllers","providers","AuthController","constructor","authService","signIn","data","response","user","this","checkEmailAndPassword","email","password","token","encryptJwt","setHeader","send","end","signUp","UserEntity","createUser","name","getUser","Post","Body","Res","SignInDto","Response","SignUpDto","Get","CurrentUser","UserInterface","Controller","AuthService","AuthMiddleware","use","req","res","next","auth","headers","Logger","log","UnauthorizedException","inputToken","String","replace","decodeToken","decryptJwt","Date","now","Number","exp","getUserByEmail","newToken","Injectable","configure","consumer","apply","exclude","path","method","RequestMethod","POST","forRoutes","ALL","TypeOrmModule","forFeature","UserPasswordEntity","JwtModule","register","secret","process","env","JWT_SECRET","signOptions","expiresIn","jwtService","findOne","where","isPasswordOfUser","isActive","ForbiddenException","payload","sign","verify","JwtService","createParamDecorator","ctx","switchToHttp","getRequest","IsEmail","IsString","Length","EventLoggerRecordDto","IsEnum","RecordTypes","IsOptional","EventLoggerController","postRecord","body","EventLoggerRecordEntity","addRecord","type","message","context","getRecords","find","Promise","EventLoggerService","exports","ConsoleLogger","stdout","console","toISOString","warn","erroe","error","verbose","debug","BaseEntity","static","record","save","PrimaryGeneratedColumn","CreateDateColumn","Column","nullable","enum","Entity","RoleEntity","length","unique","ManyToMany","roles","TeleramUpdateEntity","BadRequestException","userPassword","passwordHashed","argon2","hash","entity","OneToOne","JoinColumn","countUsersWithSameName","count","validateUserDataErrors","validate","setPassword","err","delete","roleAdmin","title","roleUser","PrimaryColumn","IsBoolean","default","UpdateDateColumn","users","JoinTable","TelegrafModule","HELPER_BOT_TOKEN","TelegramHelperBotService","startCommand","JSON","stringify","update","reply","tg","sendMessage","messageCommand","setTimeout","reply_markup","inline_keyboard","text","callback_data","getMe","onAnswer","query","callback_query","userAnswer","sendChatAction","Start","Context","On","Hears","Action","Update","CreateUserDto","UsersController","usersService","getAllUsers","findAllUsers","UsersService","relations","url","DATABASE_URL","ssl","rejectUnauthorized","autoLoadEntities","synchronize","retryAttempts","cli","migrationsDir","entities","migrations","subscribers","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","create","port","get","ConfigService","setGlobalPrefix","useGlobalPipes","ValidationPipe","listen","bootstrap","catch"],"sourceRoot":""}