{"version":3,"file":"main.js","mappings":"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","sources":["webpack://znode/./apps/server/src/app.module.ts","webpack://znode/./libs/auth/server-module/src/index.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.controller.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.middleware.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.module.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.service.ts","webpack://znode/./libs/auth/server-module/src/lib/current-user.decarator.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-in.dto.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-up.dto.ts","webpack://znode/./libs/common/interfaces/src/index.ts","webpack://znode/./libs/event-logger/src/index.ts","webpack://znode/./libs/event-logger/src/lib/dto/event-logger-record.dto.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.controller.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.module.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.service.ts","webpack://znode/./libs/storage/src/index.ts","webpack://znode/./libs/storage/src/lib/entities/event-logger-record.entity.ts","webpack://znode/./libs/storage/src/lib/entities/role.entity.ts","webpack://znode/./libs/storage/src/lib/entities/teleram-update.entity.ts","webpack://znode/./libs/storage/src/lib/entities/user-password.entity.ts","webpack://znode/./libs/storage/src/lib/entities/user.entity.ts","webpack://znode/./libs/storage/src/lib/storage.module.ts","webpack://znode/./libs/telegram/znode-helper-bot/src/index.ts","webpack://znode/./libs/telegram/znode-helper-bot/src/lib/scenes/main.scene.ts","webpack://znode/./libs/telegram/znode-helper-bot/src/lib/scenes/scenes.constants.ts","webpack://znode/./libs/telegram/znode-helper-bot/src/lib/session.middleware.ts","webpack://znode/./libs/telegram/znode-helper-bot/src/lib/telegram-znode-helper-bot.module.ts","webpack://znode/./libs/telegram/znode-helper-bot/src/lib/znode-helper-bot.update.ts","webpack://znode/./libs/users/server-module/src/index.ts","webpack://znode/./libs/users/server-module/src/lib/dto/create-user.dto.ts","webpack://znode/./libs/users/server-module/src/lib/users.controller.ts","webpack://znode/./libs/users/server-module/src/lib/users.module.ts","webpack://znode/./libs/users/server-module/src/lib/users.service.ts","webpack://znode/./ormconfig.ts","webpack://znode/external commonjs \"@nestjs/common\"","webpack://znode/external commonjs \"@nestjs/config\"","webpack://znode/external commonjs \"@nestjs/core\"","webpack://znode/external commonjs \"@nestjs/jwt\"","webpack://znode/external commonjs \"@nestjs/schedule\"","webpack://znode/external commonjs \"@nestjs/serve-static\"","webpack://znode/external commonjs \"@nestjs/typeorm\"","webpack://znode/external commonjs \"argon2\"","webpack://znode/external commonjs \"class-validator\"","webpack://znode/external commonjs \"express\"","webpack://znode/external commonjs \"nestjs-telegraf\"","webpack://znode/external commonjs \"telegraf\"","webpack://znode/external commonjs \"tslib\"","webpack://znode/external commonjs \"typeorm\"","webpack://znode/external node-commonjs \"path\"","webpack://znode/webpack/bootstrap","webpack://znode/./apps/server/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { StorageModule } from '@znode/storage';\nimport { AuthModule } from '@znode/auth-server-module';\nimport { UsersModule } from \"@znode/users/server-module\";\nimport { EventLoggerModule } from '@znode/event-logger';\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { TelegramZnodeHelperBotModule } from \"@znode/telegram/znode-helper-bot\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n    ScheduleModule.forRoot(),\n    StorageModule,\n    EventLoggerModule,\n    AuthModule,\n    UsersModule,\n    TelegramZnodeHelperBotModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","export * from './lib/auth.module';\nexport * from './lib/current-user.decarator';\nexport * from './lib/sign-in.dto';\n","import { Body, Controller, Get, Post, Res, } from '@nestjs/common';\nimport { Response } from 'express';\nimport { SignInDto } from './sign-in.dto';\nimport { CurrentUser } from './current-user.decarator';\nimport { AuthService } from \"./auth.service\";\nimport { UserEntity } from \"@znode/storage\";\nimport { SignUpDto } from \"./sign-up.dto\";\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Войти\n   * @url /api/auth/sign-in\n   * @param response\n   * @param data\n   */\n  @Post('sign-in')\n  public async signIn(@Body() data: SignInDto, @Res() response: Response) {\n    const user = await this.authService.checkEmailAndPassword(data.email, data.password);\n    const token = this.authService.encryptJwt(user);\n    response.setHeader('Authorization', `Bearer ${token}`);\n    response.send({\n      token: token,\n      user: user,\n    });\n    response.end();\n  }\n\n\n  /**\n   * Регистрация нового пользователя\n   * @param data\n   */\n  @Post('sign-up')\n  public async signUp(@Body() data: SignUpDto) {\n    return await UserEntity.createUser(data.email, data.name, data.password);\n  }\n\n\n  /**\n   * Метод возвращает данные текущего пользователя пользователя\n   * @url /api/auth/current-user\n   * @param user\n   * @private\n   */\n  @Get('current-user')\n  public getUser(@CurrentUser() user: UserInterface): UserInterface {\n    return user;\n  }\n}\n","import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { NextFunction } from 'express';\nimport { AuthService } from './auth.service';\nimport { Request, Response } from 'express';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\ninterface RequestWithUser extends Request {\n  user: UserInterface;\n}\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Промежуточный обработчик аутентификации пользователя\n   * @param req\n   * @param res\n   * @param next\n   */\n  async use(req: RequestWithUser, res: Response, next: NextFunction) {\n    let user: UserInterface;\n    const currentAccessToken = req.headers['x-access-token'];\n    if (!currentAccessToken) {\n      user = { email: 'guest@znode.ru', name: 'Гость' };\n      const token = this.authService.encryptJwt(user);\n      res.setHeader('x-access-token', JSON.stringify(token));\n      req.user = user;\n      next();\n    } else {\n      const decodeToken = this.authService.decryptJwt(String(currentAccessToken));\n      if (Date.now() > Date.parse(decodeToken.exp + '000')) {\n        user = { email: 'guest@znode.ru', name: 'Гость' };\n        const token = this.authService.encryptJwt(user);\n        res.setHeader('x-access-token', JSON.stringify(token));\n        req.user = user;\n        next();\n      } else {\n        req.user = decodeToken.user;\n        next();\n      }\n    }\n  }\n\n}\n","import { MiddlewareConsumer, Module, NestModule, RequestMethod, } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthController } from './auth.controller';\nimport { AuthMiddleware } from './auth.middleware';\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, UserPasswordEntity]),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '180s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): any {\n    consumer\n      .apply(AuthMiddleware)\n      .exclude(\n        { path: 'api/auth/sign-in', method: RequestMethod.POST },\n        { path: 'api/users', method: RequestMethod.POST },\n      )\n      .forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n}\n","import { ForbiddenException, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { UserInterface } from \"@znode/common/interfaces\";\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { JwtService } from \"@nestjs/jwt\";\n\n\nexport interface Token {\n  user: UserInterface;\n  iat: number;\n  exp: number;\n}\n\n\n@Injectable()\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n\n  /**\n   * Проверка адреса электропочты и пароля\n   * @param email\n   * @param password\n   */\n  public async checkEmailAndPassword(email: string, password: string): Promise<UserInterface> {\n    const user = await UserEntity.findOne({ where: { email: email }});\n    if (!user) {\n      throw new UnauthorizedException(`${email} не зарегистрирован!`, `AuthLocalStrategy.validate()`);\n    }\n    const checkPassword = await UserPasswordEntity.isPasswordOfUser(user, password);\n    if (!checkPassword) {\n      throw new UnauthorizedException(`Неверный пароль!`, `AuthLocalStrategy.validate()`);\n    }\n    if (!user.isActive) {\n      throw new ForbiddenException(`Доступ запрещен!`, `AuthLocalStrategy.validate()`);\n    }\n    return user;\n  }\n\n\n  /**\n   * Зашифровать токен JWT\n   * @param user\n   */\n  public encryptJwt(user: UserInterface): string {\n    const payload = { user };\n    return this.jwtService.sign(payload);\n  }\n\n\n  /**\n   * Расшифровать токен JWT\n   * @param token\n   */\n  public decryptJwt(token: string): Token {\n    return this.jwtService.decode(token) as Token;\n  }\n}\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n/**\n * Декоратор возвращающий данные текущего пользователя\n */\nexport const CurrentUser = createParamDecorator(\n  (date: unknown, ctx: ExecutionContext): UserInterface => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  }\n);\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignUpDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  name: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","export * from './lib/user.interface';\n","export * from './lib/event-logger.module';\nexport * from './lib/event-logger.service';\nexport * from './lib/dto/event-logger-record.dto';","import { RecordTypes } from \"@znode/storage\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nexport class EventLoggerRecordDto {\n  @IsEnum(RecordTypes)\n  type: RecordTypes;\n\n  @IsString()\n  message: string;\n\n  @IsOptional()\n  @IsString()\n  context?: string;\n}","import { Body, Controller, Get, Post } from \"@nestjs/common\";\nimport { EventLoggerRecordEntity } from \"@znode/storage\";\nimport { EventLoggerRecordDto } from \"./dto/event-logger-record.dto\";\n\n@Controller('event-logger')\nexport class EventLoggerController {\n  /**\n   * Добавить запись в журнал событий\n   * @url /api/event-logger/record\n   * @param body EventLoggerRecordDto\n   * @returns EventLoggerRecordEntity\n   */\n  @Post('records')\n  private async postRecord(@Body() body: EventLoggerRecordDto): Promise<EventLoggerRecordEntity> {\n    return await EventLoggerRecordEntity.addRecord(body.type, body.message, body.context);\n  }\n\n\n  /**\n   * Получить все записи журнала событий\n   * @returns EventLoggerRecordEntity[]\n   */\n  @Get('records')\n  private async getRecords(): Promise<EventLoggerRecordEntity[]> {\n    return await EventLoggerRecordEntity.find();\n  }\n}","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventLoggerRecordEntity } from '@znode/storage';\nimport { EventLoggerController } from './event-logger.controller';\nimport { EventLoggerService } from './event-logger.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([EventLoggerRecordEntity])],\n  controllers: [EventLoggerController],\n  providers: [EventLoggerService],\n  exports: [EventLoggerService],\n})\nexport class EventLoggerModule {}\n","import { ConsoleLogger, Injectable } from \"@nestjs/common\";\nimport { EventLoggerRecordEntity, RecordTypes } from \"@znode/storage\";\n\n@Injectable()\nexport class EventLoggerService extends ConsoleLogger {\n  private stdout(message: string, context?: string) {\n    console.log('EVENT LOGGER');\n    console.log('timestamp: ' + new Date().toISOString());\n    console.log('context: ' + context);\n    console.log('message: ' + message);\n    console.log();\n  }\n\n\n  log(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.log, message, context);\n  }\n\n  warn(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.warn, message, context);\n  }\n\n  erroe(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.error, message, context);\n  }\n\n  verbose(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.verbose, message, context);\n  }\n\n  debug(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.debug, message, context);\n  }\n}","export * from './lib/storage.module';\n\n// Сущности\nexport * from './lib/entities/user.entity';\nexport * from './lib/entities/user-password.entity';\nexport * from './lib/entities/role.entity';\nexport * from './lib/entities/event-logger-record.entity';\nexport * from './lib/entities/teleram-update.entity';\n","import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\nexport enum RecordTypes {\n  log = 'log',\n  warn = 'warn',\n  error = 'error',\n  verbose = 'verbose',\n  debug = 'debug'\n}\n\n/**\n * Запись журнала событий\n */\n@Entity()\nexport class EventLoggerRecordEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @CreateDateColumn()\n  timestamp: string;\n\n  @Column({ type: 'varchar', nullable: false, enum: RecordTypes })\n  type: RecordTypes;\n\n  @Column({ type: 'varchar', nullable: false })\n  message: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  context: string | null;\n\n  \n  /**\n   * Добавить запись в журнал событий\n   * @param type Тип записи\n   * @param message Сообщение\n   * @param context Контекст в котором вызывается метод\n   * @returns \n   */\n  static async addRecord(type: RecordTypes, message: string, context?: string): Promise<EventLoggerRecordEntity> {\n    let record = new EventLoggerRecordEntity();\n    record.type = type;\n    record.message = message;\n    record.context = context ?? null;\n    record = await this.save(record);\n    return record;\n  }\n}","import { BaseEntity, Column, Entity, ManyToMany, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { IsString, Length } from \"class-validator\";\nimport { UserEntity } from \"./user.entity\";\n\n@Entity('Roles')\nexport class RoleEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @IsString()\n  @Length(1, 50)\n  @Column({ type: 'varchar', length: 50, unique: true, nullable: false })\n  title: string;\n\n  @ManyToMany(() => UserEntity, user => user.roles)\n  users: UserEntity[];\n}\n","import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity('Telegram_update')\nexport class TeleramUpdateEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @CreateDateColumn()\n  timestamp: Date;\n\n  @Column({ type: 'varchar' })\n  message: string;\n\n\n  /**\n   * Добавить запись\n   * @param message\n   */\n  static async addRecord(message: string): Promise<TeleramUpdateEntity> {\n    let record = new TeleramUpdateEntity();\n    record.message = message;\n    record = await this.save(record);\n    return record;\n  }\n}\n","import { BaseEntity, Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport * as argon2 from \"argon2\";\nimport { UserEntity } from \"./user.entity\";\nimport { BadRequestException } from \"@nestjs/common\";\n\n@Entity('User_password')\nexport class UserPasswordEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToOne(() => UserEntity, user => user.password)\n  @JoinColumn()\n  user: UserEntity;\n\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  passwordHashed: string;\n\n\n  /**\n   * Установить пароля пользователя\n   * @param user\n   * @param password\n   */\n  static async setPassword(user: UserEntity, password: string): Promise<void> {\n    if (password.length < 8 || password.length > 64) {\n      throw new BadRequestException(`Длина пароля должна быть от 8 до 64 символов!`, `UserPasswordEntity.setPassword()`);\n    }\n    let userPassword = await this.findOne({ where: { user: user }});\n    if (userPassword) {\n      userPassword.passwordHashed = await argon2.hash(password);\n      await this.save(userPassword);\n      return;\n    }\n    userPassword = new UserPasswordEntity();\n    userPassword.user = user;\n    userPassword.passwordHashed = await argon2.hash(password);\n    return;\n  }\n\n\n  /**\n   * Это пароль пользователя?\n   * @param user\n   * @param password\n   */\n  static async isPasswordOfUser(user: UserEntity, password: string): Promise<boolean> {\n    const entity = await this.findOne({ where: { user: user }});\n    if (!entity) return false;\n    return await argon2.verify(entity.passwordHashed, password);\n  }\n}\n","import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity, ManyToMany,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n  JoinTable\n} from \"typeorm\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, Length, validate } from \"class-validator\";\nimport { BadRequestException, ForbiddenException, Logger, UnauthorizedException } from \"@nestjs/common\";\nimport { UserPasswordEntity } from \"./user-password.entity\";\nimport { UserInterface } from \"../../../../common/interfaces/src\";\nimport { RoleEntity } from \"./role.entity\";\n\n\n@Entity('Users')\nexport class UserEntity extends BaseEntity {\n  @IsEmail()\n  @Length(1, 255)\n  @PrimaryColumn({ type: 'varchar', length: 255, unique: true })\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  @Column({ type: 'varchar', length: 255, unique: true, nullable: false })\n  name: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Column({ type: 'boolean', nullable: false, default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  createTimestamp: Date;\n\n  @UpdateDateColumn()\n  updateTimestamp: Date;\n\n  @OneToOne(() => UserPasswordEntity, password => password.user)\n  password: UserPasswordEntity;\n\n  @ManyToMany(() => RoleEntity, roles => roles.users)\n  @JoinTable()\n  roles: RoleEntity[];\n\n\n  /**\n   * Создание нового пользователя\n   * @param email\n   * @param name\n   * @param password\n   */\n  static async createUser(email: string, name: string, password: string): Promise<UserEntity> {\n    Logger.log(`Создание нового пользователя.`, `UserEntity.createUser(${email}, ${name})`);\n    const checkEmail = await this.findOne({ where: { email: email }});\n    if (checkEmail) {\n      Logger.warn(`${email} занят!`, `UserEntity.createUser(${email}, ${name})`);\n      throw new BadRequestException(`${email} занят!`);\n    }\n    const countUsersWithSameName = await this.count({ where: { name: name }});\n    let user = new UserEntity();\n    user.email = email;\n    user.name = !countUsersWithSameName ? name : `${name} - ${countUsersWithSameName + 1}`;\n    const validateUserDataErrors = await validate(user);\n    if (validateUserDataErrors.length) {\n      Logger.warn(`${validateUserDataErrors}`, `UserEntity.createUser(${email}, ${name})`);\n      throw new BadRequestException(validateUserDataErrors);\n    }\n    user = await this.save(user);\n    try {\n      await UserPasswordEntity.setPassword(user, password);\n    } catch (err) {\n      Logger.warn(`Пароль не прошел валидацию! Создание пользователя прервано!`, `UserEntity.createUser(${email}, ${name})`);\n      await this.delete(user);\n      throw new BadRequestException(err);\n    }\n\n    // Если это первый пользователь приложения - инициализируем новые роли и пользователя-админа\n    const currentUsersCount = await this.count();\n    if (currentUsersCount === 1) {\n      Logger.log(`Создан первый пользователь приложения.`, `UserEntity.createUser(${email}, ${name})`);\n      Logger.log(`Инициализируем ролевую модель и назначаем администратора!`, `UserEntity.createUser(${email}, ${name})`);\n      let roleAdmin = new RoleEntity();\n      roleAdmin.title = 'admin';\n      roleAdmin = await RoleEntity.save(roleAdmin);\n      Logger.log(`Создана роль \"Администратор\".`, `UserEntity.createUser(${email}, ${name})`);\n\n      const roleUser = new RoleEntity();\n      roleUser.title = 'user';\n      await RoleEntity.save(roleUser);\n      Logger.log(`Создана роль \"Пользователь\".`, `UserEntity.createUser(${email}, ${name})`);\n\n      user.roles = [roleAdmin];\n      await this.save(user);\n      Logger.log(`Пользователю ${name} присвоена роль \"Администратор\".`, `UserEntity.createUser(${email}, ${name})`);\n    }\n\n    const roleUser = await RoleEntity.findOne({ where: { title: 'user' }});\n    user.roles = [...user.roles, roleUser];\n    await this.save(user);\n    Logger.log(`Пользователю ${name} присвоена роль \"Пользователь\".`, `UserEntity.createUser(${email}, ${name})`);\n    Logger.log(`Пользователь ${name} успешно зарегистрирован.`, `UserEntity.createUser(${email}, ${name})`);\n    return user;\n  }\n\n\n  /**\n   * Получить пользователя по email\n   * @param email\n   */\n  static async getUserByEmail(email: string): Promise<UserInterface> {\n    const entity = await this.findOne({where: {email: email}});\n    if (!entity) {\n      throw new UnauthorizedException();\n    }\n    if (!entity?.isActive) {\n      throw new ForbiddenException();\n    }\n    return {\n      email: entity.email,\n      name: entity.name,\n    };\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport ormConfig from '../../../../ormconfig';\n\n@Module({ imports: [TypeOrmModule.forRoot(ormConfig)] })\nexport class StorageModule {}\n","export * from './lib/telegram-znode-helper-bot.module';\n","import { Command, Ctx, Hears, Scene, SceneEnter, SceneLeave } from \"nestjs-telegraf\";\nimport { Context } from \"telegraf\";\nimport { MAIN_SCENE } from \"./scenes.constants\";\nimport { Scenes } from 'telegraf';\n\n@Scene(MAIN_SCENE)\nexport class MainScene {\n  @SceneEnter()\n  async onSceneEnter(@Ctx() ctx: Context) {\n    await ctx.reply('ljljkjlk');\n    return 'Поздравляю, ты в главной сцене!';\n  }\n\n\n  @SceneLeave()\n  async onSceneLeave(@Ctx() ctx: Context) {\n    await ctx.reply('Инициирован выход из главной сцены...');\n    setTimeout(async () => {\n      await ctx.reply('До встречи!');\n    }, 2000);\n  }\n\n  @Hears('кто я?')\n  async onHearsWhoI(@Ctx() ctx: Context) {\n    await ctx.reply('Ты мой царь-государь!');\n  }\n\n\n  @Command('exit')\n  async onCommandExit(@Ctx() ctx: Scenes.SceneContext) {\n    await ctx.scene.leave();\n  }\n}\n","export const MAIN_SCENE = 'MAIN_SCENE';\n","import { session } from \"telegraf\";\n\nexport const sessionMiddleware = session();\n","import { Module } from '@nestjs/common';\nimport { TelegrafModule } from \"nestjs-telegraf\";\nimport { ZnodeHelperBotUpdate } from \"./znode-helper-bot.update\";\nimport { MainScene } from \"./scenes/main.scene\";\nimport { sessionMiddleware } from \"./session.middleware\";\n\n@Module({\n  imports: [\n    TelegrafModule.forRootAsync({\n      botName: '@ZNodeHelperBot',\n      useFactory: () => ({\n        token: String(process.env.HELPER_BOT_TOKEN),\n        middlewares: [sessionMiddleware],\n      }),\n    }),\n  ],\n  providers: [\n    ZnodeHelperBotUpdate,\n    MainScene,\n  ],\n})\nexport class TelegramZnodeHelperBotModule {}\n","import { Action, Command, Ctx, Hears, Help, Sender, Start, Update } from \"nestjs-telegraf\";\nimport { Context } from \"telegraf\";\nimport { Scenes } from 'telegraf';\nimport { Update as ActionUpdate } from 'telegraf/typings/core/types/typegram';\nimport { MAIN_SCENE } from \"./scenes/scenes.constants\";\n\n@Update()\nexport class ZnodeHelperBotUpdate {\n  @Start()\n  async onStart(@Ctx() ctx: Context, @Sender('first_name') firstName: string) {\n    await ctx.tg.sendMessage(-675102704, 'У нас новый пользователь!');\n    await ctx.tg.sendMessage(-675102704, `И зовут его ${firstName}`);\n    await ctx.reply(`Привет, ${firstName}!`);\n    await ctx.tg.sendChatAction(ctx.chat.id, 'typing');\n    setTimeout(async () => {\n      await ctx.reply('Меня зовут ZNodeHelperBot.');\n    }, 1000);\n    await ctx.tg.sendChatAction(ctx.chat.id, 'typing');\n    setTimeout(async () => {\n      await ctx.reply('Выбери что нужно сделать.', {\n        reply_markup: {\n          inline_keyboard: [\n            [{ text: 'Войти в главную сцену', callback_data: 'mainScene'}],\n            [{ text: 'Справка', callback_data: 'help' }, { text: 'Выйти', callback_data: 'exit' }],\n          ],\n        },\n      });\n    }, 2000);\n  }\n\n\n  @Action(/mainScene|help|exit/)\n  async onAction(\n    @Ctx() ctx: Scenes.SceneContext & { update: ActionUpdate.CallbackQueryUpdate },\n    @Sender('first_name') firstName: string\n  ) {\n    const action = 'data' in ctx.update.callback_query ? ctx.update.callback_query.data : null;\n    if (action === 'mainScene') await ctx.scene.enter(MAIN_SCENE);\n    if (action === 'help') await this.onHelp(ctx, firstName);\n    if (action === 'exit') await ctx.reply('До новых встреч.');\n  }\n\n\n  @Help()\n  async onHelp(@Ctx() ctx: Context, @Sender('first_name') firstName: string) {\n    setTimeout(async () => {\n      await ctx.reply(`Как только научусь это делать... :)`);\n    }, 1000);\n    await ctx.reply(`Я тебе обязательно помогу, ${firstName}.`);\n  }\n\n\n  @Hears(['Привет', 'Здорова', 'Hi', 'Hello'])\n  async onHears(@Ctx() ctx: Context) {\n    await ctx.reply(`П`);\n  }\n\n\n  @Command('scene')\n  async onCommandScene(@Ctx() ctx: Scenes.SceneContext): Promise<void> {\n    await ctx.scene.enter(MAIN_SCENE);\n  }\n}\n","export * from './lib/users.module';\n\nexport * from './lib/dto/create-user.dto';\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  name: string;\n\n  @IsString()\n  @Length(7, 64)\n  password: string;\n}\n","import { Body, Controller, Get, Post } from \"@nestjs/common\";\nimport { UsersService } from \"./users.service\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\nimport { UserEntity } from \"@znode/storage\";\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Создание нового пользователя\n   * @url /api/users\n   * @param data\n   * @private\n   */\n  @Post()\n  private async createUser(@Body() data: CreateUserDto): Promise<UserEntity> {\n    return await this.usersService.createUser(data);\n  }\n\n  /**\n   * Получить список всех пользователей\n   * @url /api/users\n   * @private\n   */\n  @Get()\n  private async getAllUsers(): Promise<UserEntity[]> {\n    return await this.usersService.findAllUsers();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { RoleEntity } from \"@znode/storage\";\nimport { UsersController } from \"./users.controller\";\nimport { UsersService } from \"./users.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      UserEntity, UserPasswordEntity, RoleEntity,\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n","import { Injectable } from \"@nestjs/common\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\nimport { UserEntity } from \"@znode/storage\";\n\n@Injectable()\nexport class UsersService {\n  /**\n   * Создание пользователя\n   * @param data\n   */\n  public async createUser(data: CreateUserDto): Promise<UserEntity> {\n    return await UserEntity.createUser(data.email, data.name, data.password);\n  }\n\n  /**\n   * Найти всех пользователей\n   */\n  public async findAllUsers(): Promise<UserEntity[]> {\n    return UserEntity.find({ relations: ['roles'] });\n  }\n}\n","import { join } from 'path';\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\n\n/**\n * Конфигурация подключения к СУБД\n * Данная конфигурация используется как для работы в рантайме, так и для работы с TypeORM CLI\n */\nexport default ((): TypeOrmModuleOptions  => {\n  return {\n    type: 'postgres',\n    url: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n    autoLoadEntities: true,\n    synchronize: false,\n    retryAttempts: 1,\n    cli: {\n      migrationsDir: join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations'),\n    },\n    entities: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '*.entity.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '**', '*.entity.{ts,js}'),\n    ],\n    migrations: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations','*.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations', '**', '*.{ts,js}'),\n    ],\n    subscribers: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers','*.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers', '**', '*.{ts,js}'),\n    ],\n  }\n})();\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"argon2\");","module.exports = require(\"class-validator\");","module.exports = require(\"express\");","module.exports = require(\"nestjs-telegraf\");","module.exports = require(\"telegraf\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ConfigService } from '@nestjs/config';\nimport { EventLoggerService } from '@znode/event-logger';\n\nasync function bootstrap() {\n  // const app = await NestFactory.create(AppModule, {\n  //   bufferLogs: true,\n  //   logger: new EventLoggerService,\n  // });\n  const app = await NestFactory.create(AppModule);\n  const configService = app.get(ConfigService);\n  const port = configService.get<string | number>('PORT');\n  const globalPrefix = 'api';\n\n  // Инициализируем глобальный префикс для всех REST'ов\n  app.setGlobalPrefix(globalPrefix);\n\n  // Инициализируем глобальную валидацию всех входящих данных через DTO\n  app.useGlobalPipes(new ValidationPipe());\n\n  // Стартуем сервер\n  await app.listen(port);\n  Logger.log(`Сервер запущен в режиме \"${process.env.NODE_ENV}\" на: http://localhost:${port}/${globalPrefix}`);\n}\n\nbootstrap().catch((err) => {\n  Logger.error(`При запуске сервера возникла ошибка:`, `main.boostrap()`);\n  console.error(err);\n});\n"],"names":["AppModule","Module","imports","ConfigModule","forRoot","ServeStaticModule","rootPath","join","__dirname","ScheduleModule","StorageModule","EventLoggerModule","AuthModule","UsersModule","TelegramZnodeHelperBotModule","controllers","providers","AuthController","constructor","authService","signIn","data","response","user","this","checkEmailAndPassword","email","password","token","encryptJwt","setHeader","send","end","signUp","UserEntity","createUser","name","getUser","Post","Body","Res","SignInDto","Response","SignUpDto","Get","CurrentUser","UserInterface","Controller","AuthService","AuthMiddleware","use","req","res","next","currentAccessToken","headers","decodeToken","decryptJwt","String","Date","now","parse","exp","JSON","stringify","Injectable","configure","consumer","apply","exclude","path","method","RequestMethod","POST","forRoutes","ALL","TypeOrmModule","forFeature","UserPasswordEntity","JwtModule","register","secret","process","env","JWT_SECRET","signOptions","expiresIn","jwtService","findOne","where","UnauthorizedException","isPasswordOfUser","isActive","ForbiddenException","payload","sign","decode","JwtService","createParamDecorator","date","ctx","switchToHttp","getRequest","IsEmail","IsString","Length","EventLoggerRecordDto","IsEnum","RecordTypes","IsOptional","EventLoggerController","postRecord","body","EventLoggerRecordEntity","addRecord","type","message","context","getRecords","find","Promise","EventLoggerService","exports","ConsoleLogger","stdout","console","log","toISOString","warn","erroe","error","verbose","debug","BaseEntity","static","record","save","PrimaryGeneratedColumn","CreateDateColumn","Column","nullable","enum","Entity","RoleEntity","length","unique","ManyToMany","roles","TeleramUpdateEntity","BadRequestException","userPassword","passwordHashed","argon2","hash","entity","verify","OneToOne","JoinColumn","Logger","countUsersWithSameName","count","validateUserDataErrors","validate","setPassword","err","delete","roleAdmin","title","roleUser","PrimaryColumn","IsBoolean","default","UpdateDateColumn","users","JoinTable","MainScene","onSceneEnter","reply","onSceneLeave","setTimeout","onHearsWhoI","onCommandExit","scene","leave","SceneEnter","Ctx","Context","SceneLeave","Hears","Command","Scenes","SceneContext","Scene","MAIN_SCENE","sessionMiddleware","session","TelegrafModule","forRootAsync","botName","useFactory","HELPER_BOT_TOKEN","middlewares","ZnodeHelperBotUpdate","onStart","firstName","tg","sendMessage","sendChatAction","chat","id","reply_markup","inline_keyboard","text","callback_data","onAction","action","update","callback_query","enter","onHelp","onHears","onCommandScene","Start","Sender","Action","Help","Update","CreateUserDto","UsersController","usersService","getAllUsers","findAllUsers","UsersService","relations","url","DATABASE_URL","ssl","rejectUnauthorized","autoLoadEntities","synchronize","retryAttempts","cli","migrationsDir","entities","migrations","subscribers","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","create","port","get","ConfigService","setGlobalPrefix","useGlobalPipes","ValidationPipe","listen","bootstrap","catch"],"sourceRoot":""}