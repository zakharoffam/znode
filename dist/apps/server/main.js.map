{"version":3,"file":"main.js","mappings":"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","sources":["webpack://znode/./apps/server/src/app.module.ts","webpack://znode/./libs/auth/server-module/src/index.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.controller.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.middleware.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.module.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.service.ts","webpack://znode/./libs/auth/server-module/src/lib/current-user.decarator.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-in.dto.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-up.dto.ts","webpack://znode/./libs/common/interfaces/src/index.ts","webpack://znode/./libs/event-logger/server-module/src/index.ts","webpack://znode/./libs/event-logger/server-module/src/lib/event-logger.controller.ts","webpack://znode/./libs/event-logger/server-module/src/lib/event-logger.module.ts","webpack://znode/./libs/event-logger/server-module/src/lib/event-logger.service.ts","webpack://znode/./libs/storage/src/index.ts","webpack://znode/./libs/storage/src/lib/entities/COMMON/user-password.entity.ts","webpack://znode/./libs/storage/src/lib/entities/COMMON/user.entity.ts","webpack://znode/./libs/storage/src/lib/entities/LOGGER/logger-record.entity.ts","webpack://znode/./libs/storage/src/lib/storage.module.ts","webpack://znode/./ormconfig.ts","webpack://znode/external commonjs \"@nestjs/common\"","webpack://znode/external commonjs \"@nestjs/config\"","webpack://znode/external commonjs \"@nestjs/core\"","webpack://znode/external commonjs \"@nestjs/jwt\"","webpack://znode/external commonjs \"@nestjs/serve-static\"","webpack://znode/external commonjs \"@nestjs/typeorm\"","webpack://znode/external commonjs \"argon2\"","webpack://znode/external commonjs \"class-validator\"","webpack://znode/external commonjs \"express\"","webpack://znode/external commonjs \"tslib\"","webpack://znode/external commonjs \"typeorm\"","webpack://znode/external node-commonjs \"path\"","webpack://znode/webpack/bootstrap","webpack://znode/./apps/server/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { StorageModule } from '@znode/storage';\nimport { AuthModule } from '@znode/auth-server-module';\nimport { EventLoggerModule } from '@znode/event-logger-server-module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n    StorageModule,\n    AuthModule,\n    EventLoggerModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","export * from './lib/auth.module';\nexport * from './lib/current-user.decarator';\nexport * from './lib/sign-in.dto';\n","import { Body, Controller, Get, Post, Res, } from '@nestjs/common';\nimport { Response } from 'express';\nimport { SignInDto } from './sign-in.dto';\nimport { CurrentUser } from './current-user.decarator';\nimport { AuthService } from \"./auth.service\";\nimport { UserEntity } from \"@znode/storage\";\nimport { SignUpDto } from \"./sign-up.dto\";\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Войти\n   * @url /api/auth/sign-in\n   * @param response\n   * @param data\n   */\n  @Post('sign-in')\n  public async signIn(@Body() data: SignInDto, @Res() response: Response) {\n    const user = await this.authService.checkEmailAndPassword(data.email, data.password);\n    const token = this.authService.encryptJwt(user);\n    response.setHeader('Authorization', `Bearer ${token}`);\n    response.send({\n      token: token,\n      user: user,\n    });\n    response.end();\n  }\n\n\n  /**\n   * Регистрация нового пользователя\n   * @param data\n   */\n  @Post('sign-up')\n  public async signUp(@Body() data: SignUpDto) {\n    return await UserEntity.createUser(data.email, data.name, data.password);\n  }\n\n\n  /**\n   * Метод возвращает данные текущего пользователя пользователя\n   * @url /api/auth/current-user\n   * @param user\n   * @private\n   */\n  @Get('current-user')\n  public getUser(@CurrentUser() user: UserInterface): UserInterface {\n    return user;\n  }\n}\n","import { Injectable, Logger, NestMiddleware, UnauthorizedException } from '@nestjs/common';\nimport { NextFunction } from 'express';\nimport { AuthService } from './auth.service';\nimport { UserEntity } from \"@znode/storage\";\nimport { Request, Response } from 'express';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\ninterface RequestWithUser extends Request {\n  user: UserInterface;\n}\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Промежуточный обработчик аутентификации пользователя\n   * @param req\n   * @param res\n   * @param next\n   */\n  async use(req: RequestWithUser, res: Response, next: NextFunction) {\n    console.log(req.headers);\n    const auth = req.headers['Authorization'];\n    Logger.log(auth);\n    if (!auth) {\n      // Если в запросе нет токена авторизации отправим клиента на страницу авторизации\n      throw new UnauthorizedException();\n    }\n    // Извлечем токен из заголовка авторизации\n    const inputToken = String(auth).replace('Bearer ', '');\n\n    // Расшифруем полученный токен\n    const decodeToken = this.authService.decryptJwt(inputToken);\n    if (!decodeToken?.user?.email) {\n      // Если в расшифрованном токене отсутствуют пользовательские данные токен явно поддельный\n      throw new UnauthorizedException();\n    }\n    let user = decodeToken.user;\n\n    if (Date.now() > Number(String(decodeToken.exp) + '000')) {\n      // Если срок действия токена просрочен, запросим новый токен и пользовательские данные\n      user = await UserEntity.getUserByEmail(decodeToken.user.email);\n      const newToken = this.authService.encryptJwt(user);\n      // Обновим токен клиенту\n      res.setHeader('Authorization', `Bearer ${newToken}`);\n    }\n    req.user = user;\n    next();\n  }\n}\n","import { MiddlewareConsumer, Module, NestModule, RequestMethod, } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthController } from './auth.controller';\nimport { AuthMiddleware } from './auth.middleware';\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, UserPasswordEntity]),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '180s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): any {\n    consumer\n      .apply(AuthMiddleware)\n      .exclude(\n        { path: 'api/auth/sign-in', method: RequestMethod.POST },\n        { path: 'api/auth/sign-up', method: RequestMethod.POST },\n      )\n      .forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n}\n","import { ForbiddenException, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { UserInterface } from \"@znode/common/interfaces\";\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { JwtService } from \"@nestjs/jwt\";\n\n\nexport interface Token {\n  user: UserInterface;\n  iat: number;\n  exp: number;\n}\n\n\n@Injectable()\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n\n\n  /**\n   * Проверка адреса электропочты и пароля\n   * @param email\n   * @param password\n   */\n  public async checkEmailAndPassword(email: string, password: string): Promise<UserInterface> {\n    const user = await UserEntity.findOne({ where: { email: email }});\n    console.log(user);\n    if (!user) {\n      throw new UnauthorizedException(`${email} не зарегистрирован!`, `AuthLocalStrategy.validate()`);\n    }\n    const checkPassword = await UserPasswordEntity.isPasswordOfUser(user, password);\n    if (!checkPassword) {\n      throw new UnauthorizedException(`Неверный пароль!`, `AuthLocalStrategy.validate()`);\n    }\n    if (!user.isActive) {\n      throw new ForbiddenException(`Доступ запрещен!`, `AuthLocalStrategy.validate()`);\n    }\n    return user;\n  }\n\n\n  /**\n   * Зашифровать токен JWT\n   * @param user\n   */\n  public encryptJwt(user: UserInterface): string {\n    const payload = { user };\n    return this.jwtService.sign(payload);\n  }\n\n\n  /**\n   * Расшифровать токен JWT\n   * @param token\n   */\n  public decryptJwt(token: string): Token {\n    return this.jwtService.verify<Token>(token);\n  }\n}\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n/**\n * Декоратор возвращающий данные текущего пользователя\n */\nexport const CurrentUser = createParamDecorator(\n  (ctx: ExecutionContext): UserInterface => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  }\n);\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignUpDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  name: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","export * from './lib/user.interface';\n","export * from './lib/event-logger.module';\nexport * from './lib/event-logger.service';\n","import { Controller, Get } from '@nestjs/common';\nimport { LoggerRecord, LoggerRecordTypes } from '@znode/storage';\n\n@Controller('event-logger')\nexport class EventLoggerController {\n  @Get('records/add-record')\n  public async postRecord(): Promise<string> {\n    const message = `Тестовая запись ${Math.random().toString(32).slice(2)}`;\n    const context = 'EventLoggerController.postRecord()';\n    await LoggerRecord.addRecord(LoggerRecordTypes.log, message, context);\n    return 'Запись успешно добавлена.';\n  }\n\n  @Get('records')\n  public async getAllRecords(): Promise<LoggerRecord[]> {\n    return await LoggerRecord.getAllRecords();\n  }\n\n  @Get('delete')\n  public async deleteAllRecords(): Promise<string> {\n    await LoggerRecord.removeAllRecords();\n    return 'Общий журнал событий полностью очищен.';\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LoggerRecord } from '@znode/storage';\nimport { EventLoggerService } from './event-logger.service';\nimport { EventLoggerController } from './event-logger.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LoggerRecord])],\n  controllers: [EventLoggerController],\n  providers: [EventLoggerService],\n  exports: [EventLoggerService],\n})\nexport class EventLoggerModule {}\n","import { ConsoleLogger, Injectable, Logger } from '@nestjs/common';\nimport { LoggerRecord, LoggerRecordTypes } from '@znode/storage';\n\n@Injectable()\nexport class EventLoggerService extends ConsoleLogger {\n  log(message: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.log, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.log()');\n      }\n    );\n  }\n\n  error(message: string, stack?: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.error, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.error()');\n      }\n    );\n  }\n\n  warn(message: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.warn, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.warn()');\n      }\n    );\n  }\n\n  debug(message: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.debug, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.debug()');\n      }\n    );\n  }\n\n  verbose(message: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.verbose, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.verbose()');\n      }\n    );\n  }\n}\n","export * from './lib/storage.module';\n\n// LOGGER (Журнал событий)\nexport * from './lib/entities/LOGGER/logger-record.entity';\n\n// COMMON - Role-based access control или Управление доступом на основе ролей\nexport * from './lib/entities/COMMON/user.entity';\nexport * from './lib/entities/COMMON/user-password.entity';\n","import { BaseEntity, Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport * as argon2 from \"argon2\";\nimport { UserEntity } from \"./user.entity\";\nimport { BadRequestException } from \"@nestjs/common\";\n\n@Entity('COMMON_User_password')\nexport class UserPasswordEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToOne(() => UserEntity, user => user.password)\n  @JoinColumn()\n  user: UserEntity;\n\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  passwordHashed: string;\n\n\n  /**\n   * Установить пароля пользователя\n   * @param user\n   * @param password\n   */\n  static async setPassword(user: UserEntity, password: string): Promise<void> {\n    if (password.length < 8 || password.length > 64) {\n      throw new BadRequestException(`Длина пароля должна быть от 8 до 64 символов!`, `UserPasswordEntity.setPassword()`);\n    }\n    let userPassword = await this.findOne({ where: { user: user }});\n    if (userPassword) {\n      userPassword.passwordHashed = await argon2.hash(password);\n      await this.save(userPassword);\n      return;\n    }\n    userPassword = new UserPasswordEntity();\n    userPassword.user = user;\n    userPassword.passwordHashed = await argon2.hash(password);\n    return;\n  }\n\n\n  /**\n   * Это пароль пользователя?\n   * @param user\n   * @param password\n   */\n  static async isPasswordOfUser(user: UserEntity, password: string): Promise<boolean> {\n    const entity = await this.findOne({ where: { user: user }});\n    if (!entity) return false;\n    return await argon2.verify(entity.passwordHashed, password);\n  }\n}\n","import { BaseEntity, Column, CreateDateColumn, Entity, OneToOne, PrimaryColumn, UpdateDateColumn } from \"typeorm\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, Length, validate } from \"class-validator\";\nimport { BadRequestException, ForbiddenException, UnauthorizedException } from \"@nestjs/common\";\nimport { UserPasswordEntity } from \"./user-password.entity\";\nimport { UserInterface } from \"../../../../../common/interfaces/src\";\n\n\n@Entity('COMMON_Users')\nexport class UserEntity extends BaseEntity {\n  @IsEmail()\n  @Length(1, 255)\n  @PrimaryColumn({ type: 'varchar', length: 255, unique: true })\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  @Column({ type: 'varchar', length: 255, unique: true, nullable: false })\n  name: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Column({ type: 'boolean', nullable: false, default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  createTimestamp: Date;\n\n  @UpdateDateColumn()\n  updateTimestamp: Date;\n\n  @OneToOne(() => UserPasswordEntity, password => password.user)\n  password: UserPasswordEntity;\n\n\n  /**\n   * Регистрация нового пользователя\n   * @param email\n   * @param name\n   * @param password\n   */\n  static async createUser(email: string, name: string, password: string): Promise<UserEntity> {\n    const checkEmail = await this.findOne({ where: { email: email }});\n    if (checkEmail) {\n      throw new BadRequestException(`${email} занят!`);\n    }\n    const countUsersWithSameName = await this.count({ where: { name: name }});\n    let user = new UserEntity();\n    user.email = email;\n    user.name = !countUsersWithSameName ? name : `${name} - ${countUsersWithSameName + 1}`;\n    const validateUserDataErrors = await validate(user);\n    if (validateUserDataErrors.length) {\n      throw new BadRequestException(validateUserDataErrors);\n    }\n    user = await this.save(user);\n    try {\n      await UserPasswordEntity.setPassword(user, password);\n    } catch (err) {\n      await this.delete(user);\n      throw new BadRequestException(err);\n    }\n    return user;\n  }\n\n\n  /**\n   * Получить пользователя по email\n   * @param email\n   */\n  static async getUserByEmail(email: string): Promise<UserInterface> {\n    const entity = await this.findOne({where: {email: email}});\n    if (!entity) {\n      throw new UnauthorizedException();\n    }\n    if (!entity?.isActive) {\n      throw new ForbiddenException();\n    }\n    return {\n      email: entity.email,\n      name: entity.name,\n    };\n  }\n\n}\n","import {\n  BaseEntity,\n  Column, CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { IsEnum, IsOptional, IsString, Length, validate } from 'class-validator';\n\n\nexport enum LoggerRecordTypes {\n  log = 'log',\n  error = 'error',\n  warn = 'warn',\n  debug = 'debug',\n  verbose = 'verbose'\n}\n\n\n@Entity('LOGGER_records')\nexport class LoggerRecord extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @CreateDateColumn()\n  timestamp: Date;\n\n  @IsEnum(LoggerRecordTypes)\n  @Column({ type: 'varchar', length: 10, nullable: false, enum: LoggerRecordTypes })\n  type: LoggerRecordTypes;\n\n  @IsString()\n  @Length(1, 1000)\n  @Column({ type: 'varchar', length: 1000, nullable: false })\n  message: string;\n\n  @IsOptional()\n  @IsString()\n  @Length(1, 255)\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  context: string | null;\n\n\n  /**\n   * Добавь запись в общий журнал событий\n   * @param type\n   * @param message\n   * @param context\n   */\n  static async addRecord(type: LoggerRecordTypes, message: string, context?: string): Promise<LoggerRecord> {\n    const record = new LoggerRecord();\n    record.type = type;\n    record.message = message;\n    record.context = context ?? null;\n    await validate(record);\n    return await this.save(record);\n  }\n\n\n  /**\n   * Получить все записи общего журнала событий\n   */\n  static async getAllRecords(): Promise<LoggerRecord[]> {\n    return await this.find();\n  }\n\n\n  /**\n   * Удаление всех записей общего журнала событий\n   */\n  static async removeAllRecords(): Promise<void> {\n    await this.clear();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport config from '../../../../ormconfig';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(config),\n  ],\n})\nexport class StorageModule {}\n","import { join } from 'path';\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\n\n/**\n * Конфигурация подключения к СУБД\n * Данная конфигурация используется как для работы в рантайме, так и для работы с TypeORM CLI\n */\nexport default ((): TypeOrmModuleOptions  => {\n  if (process.env.NODE_ENV === 'production') {\n    return {\n      type: 'postgres',\n      url: process.env.DATABASE_URL,\n      ssl: {\n        rejectUnauthorized: false,\n      },\n      autoLoadEntities: true,\n      synchronize: false,\n      retryAttempts: 1,\n      cli: {\n        migrationsDir: join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations'),\n      },\n      entities: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '*.entity.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '**', '*.entity.{ts,js}'),\n      ],\n      migrations: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations','*.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations', '**', '*.{ts,js}'),\n      ],\n      subscribers: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers','*.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers', '**', '*.{ts,js}'),\n      ],\n    }\n  } else {\n    return {\n      type: 'sqljs',\n      location: 'dev.db',\n      autoSave: true,\n      synchronize: true,\n      retryAttempts: 1,\n      autoLoadEntities: true,\n      logging: 'all',\n      logger: 'file',\n      cli: {\n        migrationsDir: join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations'),\n      },\n      entities: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '*.entity.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '**', '*.entity.{ts,js}'),\n      ],\n      migrations: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations','*.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations', '**', '*.{ts,js}'),\n      ],\n      subscribers: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers','*.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers', '**', '*.{ts,js}'),\n      ],\n    }\n  }\n})();\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"argon2\");","module.exports = require(\"class-validator\");","module.exports = require(\"express\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ConfigService } from '@nestjs/config';\nimport { EventLoggerService } from \"@znode/event-logger-server-module\";\n\nasync function bootstrap() {\n  let options = {};\n  if (process.env.NODE_ENV === 'production') {\n    options = {\n      bufferLogs: true,\n      logger: new EventLoggerService(),\n    };\n  }\n  const app = await NestFactory.create(AppModule, options);\n  const configService = app.get(ConfigService);\n  const port = await configService.get<string | number>('PORT');\n  const globalPrefix = 'api';\n\n  // Инициализируем глобальный префикс для всех REST'ов\n  app.setGlobalPrefix(globalPrefix);\n\n\n  // Инициализируем глобальную валидацию всех входящих данных через DTO\n  app.useGlobalPipes(new ValidationPipe());\n\n  // Стартуем сервер\n  await app.listen(port);\n  Logger.log(`Сервер запущен: http://localhost:${port}/${globalPrefix}`);\n}\n\nbootstrap().catch((err) => {\n  Logger.error(`При запуске сервера возникла ошибка:`, `main.boostrap()`);\n  console.error(err);\n});\n"],"names":["AppModule","Module","imports","ConfigModule","forRoot","ServeStaticModule","rootPath","join","__dirname","StorageModule","AuthModule","EventLoggerModule","controllers","providers","AuthController","constructor","authService","signIn","data","response","user","this","checkEmailAndPassword","email","password","token","encryptJwt","setHeader","send","end","signUp","UserEntity","createUser","name","getUser","Post","Body","Res","SignInDto","Response","SignUpDto","Get","CurrentUser","UserInterface","Controller","AuthService","AuthMiddleware","use","req","res","next","console","log","headers","auth","Logger","UnauthorizedException","inputToken","String","replace","decodeToken","decryptJwt","Date","now","Number","exp","getUserByEmail","newToken","Injectable","configure","consumer","apply","exclude","path","method","RequestMethod","POST","forRoutes","ALL","TypeOrmModule","forFeature","UserPasswordEntity","JwtModule","register","secret","process","env","JWT_SECRET","signOptions","expiresIn","jwtService","findOne","where","isPasswordOfUser","isActive","ForbiddenException","payload","sign","verify","JwtService","createParamDecorator","ctx","switchToHttp","getRequest","IsEmail","IsString","Length","EventLoggerController","postRecord","message","Math","random","toString","slice","LoggerRecord","addRecord","LoggerRecordTypes","getAllRecords","deleteAllRecords","removeAllRecords","Promise","EventLoggerService","exports","ConsoleLogger","context","catch","err","error","stack","warn","debug","verbose","BaseEntity","static","length","BadRequestException","userPassword","passwordHashed","argon2","hash","save","entity","PrimaryGeneratedColumn","OneToOne","JoinColumn","Column","type","nullable","Entity","countUsersWithSameName","count","validateUserDataErrors","validate","setPassword","delete","PrimaryColumn","unique","IsOptional","IsBoolean","default","CreateDateColumn","UpdateDateColumn","record","find","clear","IsEnum","enum","url","DATABASE_URL","ssl","rejectUnauthorized","autoLoadEntities","synchronize","retryAttempts","cli","migrationsDir","entities","migrations","subscribers","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","options","bufferLogs","logger","app","NestFactory","create","configService","get","ConfigService","port","setGlobalPrefix","useGlobalPipes","ValidationPipe","listen","bootstrap"],"sourceRoot":""}