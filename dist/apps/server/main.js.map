{"version":3,"file":"main.js","mappings":"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","sources":["webpack://znode/./apps/server/src/app.module.ts","webpack://znode/./libs/auth/server-module/src/index.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.controller.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.middleware.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.module.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.service.ts","webpack://znode/./libs/auth/server-module/src/lib/current-user.decarator.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-in.dto.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-up.dto.ts","webpack://znode/./libs/common/interfaces/src/index.ts","webpack://znode/./libs/common/interfaces/src/lib/user.interface.ts","webpack://znode/./libs/event-logger/server-module/src/index.ts","webpack://znode/./libs/event-logger/server-module/src/lib/event-logger.controller.ts","webpack://znode/./libs/event-logger/server-module/src/lib/event-logger.module.ts","webpack://znode/./libs/event-logger/server-module/src/lib/event-logger.service.ts","webpack://znode/./libs/storage/src/index.ts","webpack://znode/./libs/storage/src/lib/entities/COMMON/user-password.entity.ts","webpack://znode/./libs/storage/src/lib/entities/COMMON/user.entity.ts","webpack://znode/./libs/storage/src/lib/entities/LOGGER/logger-record.entity.ts","webpack://znode/./libs/storage/src/lib/storage.module.ts","webpack://znode/./ormconfig.ts","webpack://znode/external commonjs \"@nestjs/common\"","webpack://znode/external commonjs \"@nestjs/config\"","webpack://znode/external commonjs \"@nestjs/core\"","webpack://znode/external commonjs \"@nestjs/jwt\"","webpack://znode/external commonjs \"@nestjs/serve-static\"","webpack://znode/external commonjs \"@nestjs/typeorm\"","webpack://znode/external commonjs \"argon2\"","webpack://znode/external commonjs \"class-validator\"","webpack://znode/external commonjs \"express\"","webpack://znode/external commonjs \"express-session\"","webpack://znode/external commonjs \"tslib\"","webpack://znode/external commonjs \"typeorm\"","webpack://znode/external node-commonjs \"path\"","webpack://znode/webpack/bootstrap","webpack://znode/./apps/server/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { StorageModule } from '@znode/storage';\nimport { AuthModule } from '@znode/auth-server-module';\nimport { EventLoggerModule } from '@znode/event-logger-server-module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'web-client'),\n    }),\n    StorageModule,\n    AuthModule,\n    EventLoggerModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","export * from './lib/auth.module';\nexport * from './lib/current-user.decarator';\nexport * from './lib/sign-in.dto';\n","import { Body, Controller, Get, Post, Res, } from '@nestjs/common';\nimport { Response } from 'express';\nimport { SignInDto } from './sign-in.dto';\nimport { CurrentUser } from './current-user.decarator';\nimport { AuthService } from \"./auth.service\";\nimport { UserEntity } from \"@znode/storage\";\nimport { SignUpDto } from \"./sign-up.dto\";\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Войти\n   * @url /api/auth/sign-in\n   * @param response\n   * @param data\n   */\n  @Post('sign-in')\n  public async signIn(@Body() data: SignInDto, @Res() response: Response) {\n    const user = await this.authService.checkEmailAndPassword(data.email, data.password);\n    const token = this.authService.encryptJwt(user);\n    response.setHeader('Authorization', `Bearer ${token}`);\n    response.send({\n      token: token,\n      user: user,\n    });\n    response.end();\n  }\n\n\n  /**\n   * Регистрация нового пользователя\n   * @param data\n   */\n  @Post('sign-up')\n  public async signUp(@Body() data: SignUpDto) {\n    return await UserEntity.createUser(data.email, data.name, data.password);\n  }\n\n\n  /**\n   * Метод возвращает данные текущего пользователя пользователя\n   * @url /api/auth/current-user\n   * @param user\n   * @private\n   */\n  @Get('current-user')\n  public getUser(@CurrentUser() user: UserInterface): UserInterface {\n    return user;\n  }\n}\n","import { Injectable, Logger, NestMiddleware, UnauthorizedException } from '@nestjs/common';\nimport { NextFunction } from 'express';\nimport { AuthService } from './auth.service';\nimport { UserEntity } from \"@znode/storage\";\nimport { Request, Response } from 'express';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\ninterface RequestWithUser extends Request {\n  user: UserInterface;\n}\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Промежуточный обработчик аутентификации пользователя\n   * @param req\n   * @param res\n   * @param next\n   */\n  async use(req: RequestWithUser, res: Response, next: NextFunction) {\n    console.log(req.headers);\n    const auth = req.headers['Authorization'];\n    Logger.log(auth);\n    if (!auth) {\n      // Если в запросе нет токена авторизации отправим клиента на страницу авторизации\n      throw new UnauthorizedException();\n    }\n    // Извлечем токен из заголовка авторизации\n    const inputToken = String(auth).replace('Bearer ', '');\n\n    // Расшифруем полученный токен\n    const decodeToken = this.authService.decryptJwt(inputToken);\n    if (!decodeToken?.user?.email) {\n      // Если в расшифрованном токене отсутствуют пользовательские данные токен явно поддельный\n      throw new UnauthorizedException();\n    }\n    let user = decodeToken.user;\n\n    if (Date.now() > Number(String(decodeToken.exp) + '000')) {\n      // Если срок действия токена просрочен, запросим новый токен и пользовательские данные\n      user = await UserEntity.getUserByEmail(decodeToken.user.email);\n      const newToken = this.authService.encryptJwt(user);\n      // Обновим токен клиенту\n      res.setHeader('Authorization', `Bearer ${newToken}`);\n    }\n    req.user = user;\n    next();\n  }\n}\n","import { MiddlewareConsumer, Module, NestModule, RequestMethod, } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthController } from './auth.controller';\nimport { AuthMiddleware } from './auth.middleware';\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, UserPasswordEntity]),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '180s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): any {\n    consumer\n      .apply(AuthMiddleware)\n      .exclude(\n        { path: 'api/auth/sign-in', method: RequestMethod.POST },\n        { path: 'api/auth/sign-up', method: RequestMethod.POST },\n      )\n      .forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n}\n","import { ForbiddenException, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { UserInterface } from \"@znode/common/interfaces\";\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { JwtService } from \"@nestjs/jwt\";\n\n\nexport interface Token {\n  user: UserInterface;\n  iat: number;\n  exp: number;\n}\n\n\n@Injectable()\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n\n\n  /**\n   * Проверка адреса электропочты и пароля\n   * @param email\n   * @param password\n   */\n  public async checkEmailAndPassword(email: string, password: string): Promise<UserInterface> {\n    const user = await UserEntity.findOne({ where: { email: email }});\n    console.log(user);\n    if (!user) {\n      throw new UnauthorizedException(`${email} не зарегистрирован!`, `AuthLocalStrategy.validate()`);\n    }\n    const checkPassword = await UserPasswordEntity.isPasswordOfUser(user, password);\n    if (!checkPassword) {\n      throw new UnauthorizedException(`Неверный пароль!`, `AuthLocalStrategy.validate()`);\n    }\n    if (!user.isActive) {\n      throw new ForbiddenException(`Доступ запрещен!`, `AuthLocalStrategy.validate()`);\n    }\n    return user;\n  }\n\n\n  /**\n   * Зашифровать токен JWT\n   * @param user\n   */\n  public encryptJwt(user: UserInterface): string {\n    const payload = { user };\n    return this.jwtService.sign(payload);\n  }\n\n\n  /**\n   * Расшифровать токен JWT\n   * @param token\n   */\n  public decryptJwt(token: string): Token {\n    return this.jwtService.verify<Token>(token);\n  }\n}\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n/**\n * Декоратор возвращающий данные текущего пользователя\n */\nexport const CurrentUser = createParamDecorator(\n  (ctx: ExecutionContext): UserInterface => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  }\n);\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignUpDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  name: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","export * from './lib/user.interface';\n","export interface UserInterface {\n  email: string;\n  name: string;\n}\n","export * from './lib/event-logger.module';\nexport * from './lib/event-logger.service';\n","import { Controller, Get } from '@nestjs/common';\nimport { LoggerRecord, LoggerRecordTypes } from '@znode/storage';\n\n@Controller('event-logger')\nexport class EventLoggerController {\n  @Get('records/add-record')\n  public async postRecord(): Promise<string> {\n    const message = `Тестовая запись ${Math.random().toString(32).slice(2)}`;\n    const context = 'EventLoggerController.postRecord()';\n    await LoggerRecord.addRecord(LoggerRecordTypes.log, message, context);\n    return 'Запись успешно добавлена.';\n  }\n\n  @Get('records')\n  public async getAllRecords(): Promise<LoggerRecord[]> {\n    return await LoggerRecord.getAllRecords();\n  }\n\n  @Get('delete')\n  public async deleteAllRecords(): Promise<string> {\n    await LoggerRecord.removeAllRecords();\n    return 'Общий журнал событий полностью очищен.';\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LoggerRecord } from '@znode/storage';\nimport { EventLoggerService } from './event-logger.service';\nimport { EventLoggerController } from './event-logger.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LoggerRecord])],\n  controllers: [EventLoggerController],\n  providers: [EventLoggerService],\n  exports: [EventLoggerService],\n})\nexport class EventLoggerModule {}\n","import { ConsoleLogger, Injectable, Logger } from '@nestjs/common';\nimport { LoggerRecord, LoggerRecordTypes } from '@znode/storage';\n\n@Injectable()\nexport class EventLoggerService extends ConsoleLogger {\n  log(message: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.log, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.log()');\n      }\n    );\n  }\n\n  error(message: string, stack?: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.error, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.error()');\n      }\n    );\n  }\n\n  warn(message: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.warn, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.warn()');\n      }\n    );\n  }\n\n  debug(message: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.debug, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.debug()');\n      }\n    );\n  }\n\n  verbose(message: string, context?: string) {\n    LoggerRecord.addRecord(LoggerRecordTypes.verbose, message, context).catch(\n      (err) => {\n        Logger.error(err.message, 'EventLoggerService.verbose()');\n      }\n    );\n  }\n}\n","export * from './lib/storage.module';\n\n// LOGGER (Журнал событий)\nexport * from './lib/entities/LOGGER/logger-record.entity';\n\n// COMMON - Role-based access control или Управление доступом на основе ролей\nexport * from './lib/entities/COMMON/user.entity';\nexport * from './lib/entities/COMMON/user-password.entity';\n","import { BaseEntity, Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport * as argon2 from \"argon2\";\nimport { UserEntity } from \"./user.entity\";\nimport { BadRequestException } from \"@nestjs/common\";\n\n@Entity('COMMON_User_password')\nexport class UserPasswordEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToOne(() => UserEntity, user => user.password)\n  @JoinColumn()\n  user: UserEntity;\n\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  passwordHashed: string;\n\n\n  /**\n   * Установить пароля пользователя\n   * @param user\n   * @param password\n   */\n  static async setPassword(user: UserEntity, password: string): Promise<void> {\n    if (password.length < 8 || password.length > 64) {\n      throw new BadRequestException(`Длина пароля должна быть от 8 до 64 символов!`, `UserPasswordEntity.setPassword()`);\n    }\n    let userPassword = await this.findOne({ where: { user: user }});\n    if (userPassword) {\n      userPassword.passwordHashed = await argon2.hash(password);\n      await this.save(userPassword);\n      return;\n    }\n    userPassword = new UserPasswordEntity();\n    userPassword.user = user;\n    userPassword.passwordHashed = await argon2.hash(password);\n    return;\n  }\n\n\n  /**\n   * Это пароль пользователя?\n   * @param user\n   * @param password\n   */\n  static async isPasswordOfUser(user: UserEntity, password: string): Promise<boolean> {\n    const entity = await this.findOne({ where: { user: user }});\n    if (!entity) return false;\n    return await argon2.verify(entity.passwordHashed, password);\n  }\n}\n","import { BaseEntity, Column, CreateDateColumn, Entity, OneToOne, PrimaryColumn, UpdateDateColumn } from \"typeorm\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, Length, validate } from \"class-validator\";\nimport { BadRequestException, ForbiddenException, UnauthorizedException } from \"@nestjs/common\";\nimport { UserPasswordEntity } from \"./user-password.entity\";\nimport { UserInterface } from \"../../../../../common/interfaces/src\";\n\n\n@Entity('COMMON_Users')\nexport class UserEntity extends BaseEntity {\n  @IsEmail()\n  @Length(1, 255)\n  @PrimaryColumn({ type: 'varchar', length: 255, unique: true })\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  @Column({ type: 'varchar', length: 255, unique: true, nullable: false })\n  name: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Column({ type: 'boolean', nullable: false, default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  createTimestamp: Date;\n\n  @UpdateDateColumn()\n  updateTimestamp: Date;\n\n  @OneToOne(() => UserPasswordEntity, password => password.user)\n  password: UserPasswordEntity;\n\n\n  /**\n   * Регистрация нового пользователя\n   * @param email\n   * @param name\n   * @param password\n   */\n  static async createUser(email: string, name: string, password: string): Promise<UserEntity> {\n    const checkEmail = await this.findOne({ where: { email: email }});\n    if (checkEmail) {\n      throw new BadRequestException(`${email} занят!`);\n    }\n    const countUsersWithSameName = await this.count({ where: { name: name }});\n    let user = new UserEntity();\n    user.email = email;\n    user.name = !countUsersWithSameName ? name : `${name} - ${countUsersWithSameName + 1}`;\n    const validateUserDataErrors = await validate(user);\n    if (validateUserDataErrors.length) {\n      throw new BadRequestException(validateUserDataErrors);\n    }\n    user = await this.save(user);\n    try {\n      await UserPasswordEntity.setPassword(user, password);\n    } catch (err) {\n      await this.delete(user);\n      throw new BadRequestException(err);\n    }\n    return user;\n  }\n\n\n  /**\n   * Получить пользователя по email\n   * @param email\n   */\n  static async getUserByEmail(email: string): Promise<UserInterface> {\n    const entity = await this.findOne({where: {email: email}});\n    if (!entity) {\n      throw new UnauthorizedException();\n    }\n    if (!entity?.isActive) {\n      throw new ForbiddenException();\n    }\n    return {\n      email: entity.email,\n      name: entity.name,\n    };\n  }\n\n}\n","import {\n  BaseEntity,\n  Column, CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { IsEnum, IsOptional, IsString, Length, validate } from 'class-validator';\n\n\nexport enum LoggerRecordTypes {\n  log = 'log',\n  error = 'error',\n  warn = 'warn',\n  debug = 'debug',\n  verbose = 'verbose'\n}\n\n\n@Entity('LOGGER_records')\nexport class LoggerRecord extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @CreateDateColumn()\n  timestamp: Date;\n\n  @IsEnum(LoggerRecordTypes)\n  @Column({ type: 'varchar', length: 10, nullable: false, enum: LoggerRecordTypes })\n  type: LoggerRecordTypes;\n\n  @IsString()\n  @Length(1, 1000)\n  @Column({ type: 'varchar', length: 1000, nullable: false })\n  message: string;\n\n  @IsOptional()\n  @IsString()\n  @Length(1, 255)\n  @Column({ type: 'varchar', length: 255, nullable: true })\n  context: string | null;\n\n\n  /**\n   * Добавь запись в общий журнал событий\n   * @param type\n   * @param message\n   * @param context\n   */\n  static async addRecord(type: LoggerRecordTypes, message: string, context?: string): Promise<LoggerRecord> {\n    const record = new LoggerRecord();\n    record.type = type;\n    record.message = message;\n    record.context = context ?? null;\n    await validate(record);\n    return await this.save(record);\n  }\n\n\n  /**\n   * Получить все записи общего журнала событий\n   */\n  static async getAllRecords(): Promise<LoggerRecord[]> {\n    return await this.find();\n  }\n\n\n  /**\n   * Удаление всех записей общего журнала событий\n   */\n  static async removeAllRecords(): Promise<void> {\n    await this.clear();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport config from '../../../../ormconfig';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(config),\n  ],\n})\nexport class StorageModule {}\n","import { join } from 'path';\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\n\n/**\n * Конфигурация подключения к СУБД\n * Данная конфигурация используется как для работы в рантайме, так и для работы с TypeORM CLI\n */\nexport default ((): TypeOrmModuleOptions  => {\n  if (process.env.NODE_ENV === 'production') {\n    return {\n      type: 'postgres',\n      url: process.env.DATABASE_URL,\n      ssl: {\n        rejectUnauthorized: false,\n      },\n      autoLoadEntities: true,\n      synchronize: false,\n      retryAttempts: 1,\n      cli: {\n        migrationsDir: join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations'),\n      },\n      entities: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '*.entity.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '**', '*.entity.{ts,js}'),\n      ],\n      migrations: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations','*.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations', '**', '*.{ts,js}'),\n      ],\n      subscribers: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers','*.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers', '**', '*.{ts,js}'),\n      ],\n    }\n  } else {\n    return {\n      type: 'sqljs',\n      location: 'dev.db',\n      autoSave: true,\n      synchronize: true,\n      retryAttempts: 1,\n      autoLoadEntities: true,\n      logging: 'all',\n      logger: 'file',\n      cli: {\n        migrationsDir: join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations'),\n      },\n      entities: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '*.entity.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '**', '*.entity.{ts,js}'),\n      ],\n      migrations: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations','*.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations', '**', '*.{ts,js}'),\n      ],\n      subscribers: [\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers','*.{ts,js}'),\n        join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers', '**', '*.{ts,js}'),\n      ],\n    }\n  }\n})();\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"argon2\");","module.exports = require(\"class-validator\");","module.exports = require(\"express\");","module.exports = require(\"express-session\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ConfigService } from '@nestjs/config';\nimport * as session from 'express-session';\nimport { EventLoggerService } from \"@znode/event-logger-server-module\";\n\nasync function bootstrap() {\n  let options = {};\n  if (process.env.NODE_ENV === 'production') {\n    options = {\n      bufferLogs: true,\n      logger: new EventLoggerService(),\n    };\n  }\n  const app = await NestFactory.create(AppModule, options);\n  const configService = app.get(ConfigService);\n  const port = await configService.get<string | number>('PORT');\n  const sessionSecret = await configService.get<string>('SESSION_SECRET');\n  const globalPrefix = 'api';\n\n  // Инициализируем глобальный префикс для всех REST'ов\n  app.setGlobalPrefix(globalPrefix);\n\n  // Промежуточный обработчик сессий\n  app.use(\n    session({\n      secret: sessionSecret,\n      resave: false,\n      saveUninitialized: false,\n    })\n  );\n\n  // Инициализируем глобальную валидацию всех входящих данных через DTO\n  app.useGlobalPipes(new ValidationPipe());\n\n  // Стартуем сервер\n  await app.listen(port);\n  Logger.log(`Сервер запущен: http://localhost:${port}/${globalPrefix}`);\n}\n\nbootstrap().catch((err) => {\n  Logger.error(`При запуске сервера возникла ошибка:`, `main.boostrap()`);\n  console.error(err);\n});\n"],"names":[],"sourceRoot":""}