{"version":3,"file":"main.js","mappings":"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","sources":["webpack://znode/./apps/server/src/app.module.ts","webpack://znode/./libs/auth/server-module/src/index.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.controller.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.middleware.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.module.ts","webpack://znode/./libs/auth/server-module/src/lib/auth.service.ts","webpack://znode/./libs/auth/server-module/src/lib/current-user.decarator.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-in.dto.ts","webpack://znode/./libs/auth/server-module/src/lib/sign-up.dto.ts","webpack://znode/./libs/common/interfaces/src/index.ts","webpack://znode/./libs/event-logger/src/index.ts","webpack://znode/./libs/event-logger/src/lib/dto/event-logger-record.dto.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.controller.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.module.ts","webpack://znode/./libs/event-logger/src/lib/event-logger.service.ts","webpack://znode/./libs/storage/src/index.ts","webpack://znode/./libs/storage/src/lib/entities/event-logger-record.entity.ts","webpack://znode/./libs/storage/src/lib/entities/role.entity.ts","webpack://znode/./libs/storage/src/lib/entities/teleram-update.entity.ts","webpack://znode/./libs/storage/src/lib/entities/user-password.entity.ts","webpack://znode/./libs/storage/src/lib/entities/user.entity.ts","webpack://znode/./libs/storage/src/lib/storage.module.ts","webpack://znode/./libs/telegram/helper-bot/src/index.ts","webpack://znode/./libs/telegram/helper-bot/src/lib/telegram-helper-bot.module.ts","webpack://znode/./libs/telegram/helper-bot/src/lib/telegram-helper-bot.service.ts","webpack://znode/./libs/users/server-module/src/index.ts","webpack://znode/./libs/users/server-module/src/lib/dto/create-user.dto.ts","webpack://znode/./libs/users/server-module/src/lib/users.controller.ts","webpack://znode/./libs/users/server-module/src/lib/users.module.ts","webpack://znode/./libs/users/server-module/src/lib/users.service.ts","webpack://znode/./ormconfig.ts","webpack://znode/external commonjs \"@nestjs/common\"","webpack://znode/external commonjs \"@nestjs/config\"","webpack://znode/external commonjs \"@nestjs/core\"","webpack://znode/external commonjs \"@nestjs/jwt\"","webpack://znode/external commonjs \"@nestjs/schedule\"","webpack://znode/external commonjs \"@nestjs/serve-static\"","webpack://znode/external commonjs \"@nestjs/typeorm\"","webpack://znode/external commonjs \"argon2\"","webpack://znode/external commonjs \"class-validator\"","webpack://znode/external commonjs \"express\"","webpack://znode/external commonjs \"nestjs-telegraf\"","webpack://znode/external commonjs \"telegraf\"","webpack://znode/external commonjs \"tslib\"","webpack://znode/external commonjs \"typeorm\"","webpack://znode/external node-commonjs \"path\"","webpack://znode/webpack/bootstrap","webpack://znode/./apps/server/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { StorageModule } from '@znode/storage';\nimport { AuthModule } from '@znode/auth-server-module';\nimport { UsersModule } from \"@znode/users/server-module\";\nimport { EventLoggerModule } from '@znode/event-logger';\nimport { TelegramHelperBotModule } from \"@znode/telegram/helper-bot\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'client'),\n    }),\n    ScheduleModule.forRoot(),\n    StorageModule,\n    EventLoggerModule,\n    AuthModule,\n    UsersModule,\n    TelegramHelperBotModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","export * from './lib/auth.module';\nexport * from './lib/current-user.decarator';\nexport * from './lib/sign-in.dto';\n","import { Body, Controller, Get, Post, Res, } from '@nestjs/common';\nimport { Response } from 'express';\nimport { SignInDto } from './sign-in.dto';\nimport { CurrentUser } from './current-user.decarator';\nimport { AuthService } from \"./auth.service\";\nimport { UserEntity } from \"@znode/storage\";\nimport { SignUpDto } from \"./sign-up.dto\";\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Войти\n   * @url /api/auth/sign-in\n   * @param response\n   * @param data\n   */\n  @Post('sign-in')\n  public async signIn(@Body() data: SignInDto, @Res() response: Response) {\n    const user = await this.authService.checkEmailAndPassword(data.email, data.password);\n    const token = this.authService.encryptJwt(user);\n    response.setHeader('Authorization', `Bearer ${token}`);\n    response.send({\n      token: token,\n      user: user,\n    });\n    response.end();\n  }\n\n\n  /**\n   * Регистрация нового пользователя\n   * @param data\n   */\n  @Post('sign-up')\n  public async signUp(@Body() data: SignUpDto) {\n    return await UserEntity.createUser(data.email, data.name, data.password);\n  }\n\n\n  /**\n   * Метод возвращает данные текущего пользователя пользователя\n   * @url /api/auth/current-user\n   * @param user\n   * @private\n   */\n  @Get('current-user')\n  public getUser(@CurrentUser() user: UserInterface): UserInterface {\n    return user;\n  }\n}\n","import { Injectable, Logger, NestMiddleware, UnauthorizedException } from '@nestjs/common';\nimport { NextFunction } from 'express';\nimport { AuthService } from './auth.service';\nimport { UserEntity } from \"@znode/storage\";\nimport { Request, Response } from 'express';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\ninterface RequestWithUser extends Request {\n  user: UserInterface;\n}\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Промежуточный обработчик аутентификации пользователя\n   * @param req\n   * @param res\n   * @param next\n   */\n  async use(req: RequestWithUser, res: Response, next: NextFunction) {\n    const auth = req.headers['Authorization'];\n    Logger.log(auth);\n    if (!auth) {\n      // Если в запросе нет токена авторизации отправим клиента на страницу авторизации\n      throw new UnauthorizedException();\n    }\n    // Извлечем токен из заголовка авторизации\n    const inputToken = String(auth).replace('Bearer ', '');\n\n    // Расшифруем полученный токен\n    const decodeToken = this.authService.decryptJwt(inputToken);\n    if (!decodeToken?.user?.email) {\n      // Если в расшифрованном токене отсутствуют пользовательские данные токен явно поддельный\n      throw new UnauthorizedException();\n    }\n    let user = decodeToken.user;\n\n    if (Date.now() > Number(String(decodeToken.exp) + '000')) {\n      // Если срок действия токена просрочен, запросим новый токен и пользовательские данные\n      user = await UserEntity.getUserByEmail(decodeToken.user.email);\n      const newToken = this.authService.encryptJwt(user);\n      // Обновим токен клиенту\n      res.setHeader('Authorization', `Bearer ${newToken}`);\n    }\n    req.user = user;\n    next();\n  }\n}\n","import { MiddlewareConsumer, Module, NestModule, RequestMethod, } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthController } from './auth.controller';\nimport { AuthMiddleware } from './auth.middleware';\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtModule } from \"@nestjs/jwt\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, UserPasswordEntity]),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '180s' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): any {\n    consumer\n      .apply(AuthMiddleware)\n      .exclude(\n        { path: 'api/auth/sign-in', method: RequestMethod.POST },\n        { path: 'api/users', method: RequestMethod.POST },\n      )\n      .forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n}\n","import { ForbiddenException, Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { UserInterface } from \"@znode/common/interfaces\";\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { JwtService } from \"@nestjs/jwt\";\n\n\nexport interface Token {\n  user: UserInterface;\n  iat: number;\n  exp: number;\n}\n\n\n@Injectable()\nexport class AuthService {\n  constructor(private jwtService: JwtService) {}\n\n\n  /**\n   * Проверка адреса электропочты и пароля\n   * @param email\n   * @param password\n   */\n  public async checkEmailAndPassword(email: string, password: string): Promise<UserInterface> {\n    const user = await UserEntity.findOne({ where: { email: email }});\n    if (!user) {\n      throw new UnauthorizedException(`${email} не зарегистрирован!`, `AuthLocalStrategy.validate()`);\n    }\n    const checkPassword = await UserPasswordEntity.isPasswordOfUser(user, password);\n    if (!checkPassword) {\n      throw new UnauthorizedException(`Неверный пароль!`, `AuthLocalStrategy.validate()`);\n    }\n    if (!user.isActive) {\n      throw new ForbiddenException(`Доступ запрещен!`, `AuthLocalStrategy.validate()`);\n    }\n    return user;\n  }\n\n\n  /**\n   * Зашифровать токен JWT\n   * @param user\n   */\n  public encryptJwt(user: UserInterface): string {\n    const payload = { user };\n    return this.jwtService.sign(payload);\n  }\n\n\n  /**\n   * Расшифровать токен JWT\n   * @param token\n   */\n  public decryptJwt(token: string): Token {\n    return this.jwtService.verify<Token>(token);\n  }\n}\n","import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { UserInterface } from \"@znode/common/interfaces\";\n\n/**\n * Декоратор возвращающий данные текущего пользователя\n */\nexport const CurrentUser = createParamDecorator(\n  (ctx: ExecutionContext): UserInterface => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  }\n);\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignInDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class SignUpDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  name: string;\n\n  @IsString()\n  @Length(1, 64)\n  password: string;\n}\n","export * from './lib/user.interface';\n","export * from './lib/event-logger.module';\nexport * from './lib/event-logger.service';\nexport * from './lib/dto/event-logger-record.dto';","import { RecordTypes } from \"@znode/storage\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nexport class EventLoggerRecordDto {\n  @IsEnum(RecordTypes)\n  type: RecordTypes;\n\n  @IsString()\n  message: string;\n\n  @IsOptional()\n  @IsString()\n  context?: string;\n}","import { Body, Controller, Get, Post } from \"@nestjs/common\";\nimport { EventLoggerRecordEntity } from \"@znode/storage\";\nimport { EventLoggerRecordDto } from \"./dto/event-logger-record.dto\";\n\n@Controller('event-logger')\nexport class EventLoggerController {\n  /**\n   * Добавить запись в журнал событий\n   * @url /api/event-logger/record\n   * @param body EventLoggerRecordDto\n   * @returns EventLoggerRecordEntity\n   */\n  @Post('records')\n  private async postRecord(@Body() body: EventLoggerRecordDto): Promise<EventLoggerRecordEntity> {\n    return await EventLoggerRecordEntity.addRecord(body.type, body.message, body.context);\n  }\n\n\n  /**\n   * Получить все записи журнала событий\n   * @returns EventLoggerRecordEntity[]\n   */\n  @Get('records')\n  private async getRecords(): Promise<EventLoggerRecordEntity[]> {\n    return await EventLoggerRecordEntity.find();\n  }\n}","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventLoggerRecordEntity } from '@znode/storage';\nimport { EventLoggerController } from './event-logger.controller';\nimport { EventLoggerService } from './event-logger.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([EventLoggerRecordEntity])],\n  controllers: [EventLoggerController],\n  providers: [EventLoggerService],\n  exports: [EventLoggerService],\n})\nexport class EventLoggerModule {}\n","import { ConsoleLogger, Injectable } from \"@nestjs/common\";\nimport { EventLoggerRecordEntity, RecordTypes } from \"@znode/storage\";\n\n@Injectable()\nexport class EventLoggerService extends ConsoleLogger {\n  private stdout(message: string, context?: string) {\n    console.log('EVENT LOGGER');\n    console.log('timestamp: ' + new Date().toISOString());\n    console.log('context: ' + context);\n    console.log('message: ' + message);\n    console.log();\n  }\n\n\n  log(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.log, message, context);\n  }\n\n  warn(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.warn, message, context);\n  }\n\n  erroe(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.error, message, context);\n  }\n\n  verbose(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.verbose, message, context);\n  }\n\n  debug(message: string, context?: string): void {\n    this.stdout(message, context);\n    EventLoggerRecordEntity.addRecord(RecordTypes.debug, message, context);\n  }\n}","export * from './lib/storage.module';\n\n// Сущности\nexport * from './lib/entities/user.entity';\nexport * from './lib/entities/user-password.entity';\nexport * from './lib/entities/role.entity';\nexport * from './lib/entities/event-logger-record.entity';\nexport * from './lib/entities/teleram-update.entity';\n","import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\nexport enum RecordTypes {\n  log = 'log',\n  warn = 'warn',\n  error = 'error',\n  verbose = 'verbose',\n  debug = 'debug'\n}\n\n/**\n * Запись журнала событий\n */\n@Entity()\nexport class EventLoggerRecordEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @CreateDateColumn()\n  timestamp: string;\n\n  @Column({ type: 'varchar', nullable: false, enum: RecordTypes })\n  type: RecordTypes;\n\n  @Column({ type: 'varchar', nullable: false })\n  message: string;\n\n  @Column({ type: 'varchar', nullable: true })\n  context: string | null;\n\n  \n  /**\n   * Добавить запись в журнал событий\n   * @param type Тип записи\n   * @param message Сообщение\n   * @param context Контекст в котором вызывается метод\n   * @returns \n   */\n  static async addRecord(type: RecordTypes, message: string, context?: string): Promise<EventLoggerRecordEntity> {\n    let record = new EventLoggerRecordEntity();\n    record.type = type;\n    record.message = message;\n    record.context = context ?? null;\n    record = await this.save(record);\n    return record;\n  }\n}","import { BaseEntity, Column, Entity, ManyToMany, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { IsString, Length } from \"class-validator\";\nimport { UserEntity } from \"./user.entity\";\n\n@Entity('Roles')\nexport class RoleEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @IsString()\n  @Length(1, 50)\n  @Column({ type: 'varchar', length: 50, unique: true, nullable: false })\n  title: string;\n\n  @ManyToMany(() => UserEntity, user => user.roles)\n  users: UserEntity[];\n}\n","import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity('Telegram_update')\nexport class TeleramUpdateEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @CreateDateColumn()\n  timestamp: Date;\n\n  @Column({ type: 'varchar' })\n  message: string;\n\n\n  /**\n   * Добавить запись\n   * @param message\n   */\n  static async addRecord(message: string): Promise<TeleramUpdateEntity> {\n    let record = new TeleramUpdateEntity();\n    record.message = message;\n    record = await this.save(record);\n    return record;\n  }\n}\n","import { BaseEntity, Column, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport * as argon2 from \"argon2\";\nimport { UserEntity } from \"./user.entity\";\nimport { BadRequestException } from \"@nestjs/common\";\n\n@Entity('User_password')\nexport class UserPasswordEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @OneToOne(() => UserEntity, user => user.password)\n  @JoinColumn()\n  user: UserEntity;\n\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  passwordHashed: string;\n\n\n  /**\n   * Установить пароля пользователя\n   * @param user\n   * @param password\n   */\n  static async setPassword(user: UserEntity, password: string): Promise<void> {\n    if (password.length < 8 || password.length > 64) {\n      throw new BadRequestException(`Длина пароля должна быть от 8 до 64 символов!`, `UserPasswordEntity.setPassword()`);\n    }\n    let userPassword = await this.findOne({ where: { user: user }});\n    if (userPassword) {\n      userPassword.passwordHashed = await argon2.hash(password);\n      await this.save(userPassword);\n      return;\n    }\n    userPassword = new UserPasswordEntity();\n    userPassword.user = user;\n    userPassword.passwordHashed = await argon2.hash(password);\n    return;\n  }\n\n\n  /**\n   * Это пароль пользователя?\n   * @param user\n   * @param password\n   */\n  static async isPasswordOfUser(user: UserEntity, password: string): Promise<boolean> {\n    const entity = await this.findOne({ where: { user: user }});\n    if (!entity) return false;\n    return await argon2.verify(entity.passwordHashed, password);\n  }\n}\n","import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity, ManyToMany,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n  JoinTable\n} from \"typeorm\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, Length, validate } from \"class-validator\";\nimport { BadRequestException, ForbiddenException, Logger, UnauthorizedException } from \"@nestjs/common\";\nimport { UserPasswordEntity } from \"./user-password.entity\";\nimport { UserInterface } from \"../../../../common/interfaces/src\";\nimport { RoleEntity } from \"./role.entity\";\n\n\n@Entity('Users')\nexport class UserEntity extends BaseEntity {\n  @IsEmail()\n  @Length(1, 255)\n  @PrimaryColumn({ type: 'varchar', length: 255, unique: true })\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  @Column({ type: 'varchar', length: 255, unique: true, nullable: false })\n  name: string;\n\n  @IsOptional()\n  @IsBoolean()\n  @Column({ type: 'boolean', nullable: false, default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  createTimestamp: Date;\n\n  @UpdateDateColumn()\n  updateTimestamp: Date;\n\n  @OneToOne(() => UserPasswordEntity, password => password.user)\n  password: UserPasswordEntity;\n\n  @ManyToMany(() => RoleEntity, roles => roles.users)\n  @JoinTable()\n  roles: RoleEntity[];\n\n\n  /**\n   * Создание нового пользователя\n   * @param email\n   * @param name\n   * @param password\n   */\n  static async createUser(email: string, name: string, password: string): Promise<UserEntity> {\n    Logger.log(`Создание нового пользователя.`, `UserEntity.createUser(${email}, ${name})`);\n    const checkEmail = await this.findOne({ where: { email: email }});\n    if (checkEmail) {\n      Logger.warn(`${email} занят!`, `UserEntity.createUser(${email}, ${name})`);\n      throw new BadRequestException(`${email} занят!`);\n    }\n    const countUsersWithSameName = await this.count({ where: { name: name }});\n    let user = new UserEntity();\n    user.email = email;\n    user.name = !countUsersWithSameName ? name : `${name} - ${countUsersWithSameName + 1}`;\n    const validateUserDataErrors = await validate(user);\n    if (validateUserDataErrors.length) {\n      Logger.warn(`${validateUserDataErrors}`, `UserEntity.createUser(${email}, ${name})`);\n      throw new BadRequestException(validateUserDataErrors);\n    }\n    user = await this.save(user);\n    try {\n      await UserPasswordEntity.setPassword(user, password);\n    } catch (err) {\n      Logger.warn(`Пароль не прошел валидацию! Создание пользователя прервано!`, `UserEntity.createUser(${email}, ${name})`);\n      await this.delete(user);\n      throw new BadRequestException(err);\n    }\n\n    // Если это первый пользователь приложения - инициализируем новые роли и пользователя-админа\n    const currentUsersCount = await this.count();\n    if (currentUsersCount === 1) {\n      Logger.log(`Создан первый пользователь приложения.`, `UserEntity.createUser(${email}, ${name})`);\n      Logger.log(`Инициализируем ролевую модель и назначаем администратора!`, `UserEntity.createUser(${email}, ${name})`);\n      let roleAdmin = new RoleEntity();\n      roleAdmin.title = 'admin';\n      roleAdmin = await RoleEntity.save(roleAdmin);\n      Logger.log(`Создана роль \"Администратор\".`, `UserEntity.createUser(${email}, ${name})`);\n\n      const roleUser = new RoleEntity();\n      roleUser.title = 'user';\n      await RoleEntity.save(roleUser);\n      Logger.log(`Создана роль \"Пользователь\".`, `UserEntity.createUser(${email}, ${name})`);\n\n      user.roles = [roleAdmin];\n      await this.save(user);\n      Logger.log(`Пользователю ${name} присвоена роль \"Администратор\".`, `UserEntity.createUser(${email}, ${name})`);\n    }\n\n    const roleUser = await RoleEntity.findOne({ where: { title: 'user' }});\n    user.roles = [...user.roles, roleUser];\n    await this.save(user);\n    Logger.log(`Пользователю ${name} присвоена роль \"Пользователь\".`, `UserEntity.createUser(${email}, ${name})`);\n    Logger.log(`Пользователь ${name} успешно зарегистрирован.`, `UserEntity.createUser(${email}, ${name})`);\n    return user;\n  }\n\n\n  /**\n   * Получить пользователя по email\n   * @param email\n   */\n  static async getUserByEmail(email: string): Promise<UserInterface> {\n    const entity = await this.findOne({where: {email: email}});\n    if (!entity) {\n      throw new UnauthorizedException();\n    }\n    if (!entity?.isActive) {\n      throw new ForbiddenException();\n    }\n    return {\n      email: entity.email,\n      name: entity.name,\n    };\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport ormConfig from '../../../../ormconfig';\n\n@Module({ imports: [TypeOrmModule.forRoot(ormConfig)] })\nexport class StorageModule {}\n","export * from './lib/telegram-helper-bot.module';\n","import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { EventLoggerRecordEntity, TeleramUpdateEntity } from \"@znode/storage\";\nimport { TelegrafModule } from \"nestjs-telegraf\";\nimport { TelegramHelperBotService } from \"./telegram-helper-bot.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      EventLoggerRecordEntity,\n      TeleramUpdateEntity,\n    ]),\n    TelegrafModule.forRoot({\n      token: String(process.env.HELPER_BOT_TOKEN),\n    }),\n  ],\n  providers: [TelegramHelperBotService],\n})\nexport class TelegramHelperBotModule {}\n","import { Injectable } from \"@nestjs/common\";\nimport { Start, Update, On, Action } from \"nestjs-telegraf\";\nimport { Context } from \"telegraf\";\nimport { TeleramUpdateEntity } from \"@znode/storage\";\n\n@Update()\n@Injectable()\nexport class TelegramHelperBotService {\n  @Start()\n  public async startCommand(ctx: Context) {\n    await TeleramUpdateEntity.addRecord(JSON.stringify(ctx.update));\n    await ctx.reply('Привет!');\n    await ctx.reply('👋');\n  }\n\n  @On('message')\n  public async messageCommand(ctx: Context) {\n    await TeleramUpdateEntity.addRecord(JSON.stringify(ctx.update));\n    // @ts-ignore\n    if (ctx.update && ctx.update.message.text === 'Статистика') {\n      const allRecords = await TeleramUpdateEntity.find({ order: { timestamp: 'DESC' }, take: 5 });\n      await ctx.reply(JSON.stringify(allRecords));\n    } else {\n      await ctx.reply('Привет!');\n      await ctx.reply('👋');\n      setTimeout(async () => {\n        await ctx.reply('Сколько будет 2 + 2?', {\n          reply_markup: {\n            inline_keyboard: [\n              [{ text: '4', callback_data: '4'}],\n              [{ text: '8', callback_data: '8'}]\n            ]\n          }\n        })\n      }, 1000);\n    }\n  }\n\n  @Action(['4', '8'])\n  public async onAnswer(ctx: Context) {\n    if (\"callback_query\" in ctx.update) {\n      const query = ctx.update.callback_query;\n      const userAnswer = 'data' in query ? query.data : null;\n\n      await ctx.reply('Тут надо подумать...');\n      await ctx.reply('🤔');\n\n      if (userAnswer === '4') {\n        setTimeout(async () => {\n          await ctx.reply('Правильно!');\n          await ctx.reply('🥳');\n        }, 2500);\n      } else {\n        setTimeout(async () => {\n          await ctx.reply('К сожалению это не верный ответ.');\n          await ctx.reply('🤪');\n        }, 1000);\n      }\n    }\n  }\n}\n","export * from './lib/users.module';\n\nexport * from './lib/dto/create-user.dto';\n","import { IsEmail, IsString, Length } from \"class-validator\";\n\nexport class CreateUserDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @Length(1, 255)\n  name: string;\n\n  @IsString()\n  @Length(7, 64)\n  password: string;\n}\n","import { Body, Controller, Get, Post } from \"@nestjs/common\";\nimport { UsersService } from \"./users.service\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\nimport { UserEntity } from \"@znode/storage\";\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Создание нового пользователя\n   * @url /api/users\n   * @param data\n   * @private\n   */\n  @Post()\n  private async createUser(@Body() data: CreateUserDto): Promise<UserEntity> {\n    return await this.usersService.createUser(data);\n  }\n\n  /**\n   * Получить список всех пользователей\n   * @url /api/users\n   * @private\n   */\n  @Get()\n  private async getAllUsers(): Promise<UserEntity[]> {\n    return await this.usersService.findAllUsers();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { UserEntity, UserPasswordEntity } from \"@znode/storage\";\nimport { RoleEntity } from \"@znode/storage\";\nimport { UsersController } from \"./users.controller\";\nimport { UsersService } from \"./users.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      UserEntity, UserPasswordEntity, RoleEntity,\n    ]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n","import { Injectable } from \"@nestjs/common\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\nimport { UserEntity } from \"@znode/storage\";\n\n@Injectable()\nexport class UsersService {\n  /**\n   * Создание пользователя\n   * @param data\n   */\n  public async createUser(data: CreateUserDto): Promise<UserEntity> {\n    return await UserEntity.createUser(data.email, data.name, data.password);\n  }\n\n  /**\n   * Найти всех пользователей\n   */\n  public async findAllUsers(): Promise<UserEntity[]> {\n    return UserEntity.find({ relations: ['roles'] });\n  }\n}\n","import { join } from 'path';\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\n\n/**\n * Конфигурация подключения к СУБД\n * Данная конфигурация используется как для работы в рантайме, так и для работы с TypeORM CLI\n */\nexport default ((): TypeOrmModuleOptions  => {\n  return {\n    type: 'postgres',\n    url: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n    autoLoadEntities: true,\n    synchronize: false,\n    retryAttempts: 1,\n    cli: {\n      migrationsDir: join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations'),\n    },\n    entities: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '*.entity.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'entities', '**', '*.entity.{ts,js}'),\n    ],\n    migrations: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations','*.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'migrations', '**', '*.{ts,js}'),\n    ],\n    subscribers: [\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers','*.{ts,js}'),\n      join(__dirname, 'libs', 'storage', 'src', 'lib', 'subscribers', '**', '*.{ts,js}'),\n    ],\n  }\n})();\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"argon2\");","module.exports = require(\"class-validator\");","module.exports = require(\"express\");","module.exports = require(\"nestjs-telegraf\");","module.exports = require(\"telegraf\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ConfigService } from '@nestjs/config';\nimport { EventLoggerService } from '@znode/event-logger';\n\nasync function bootstrap() {\n  // const app = await NestFactory.create(AppModule, {\n  //   bufferLogs: true,\n  //   logger: new EventLoggerService,\n  // });\n  const app = await NestFactory.create(AppModule);\n  const configService = app.get(ConfigService);\n  const port = configService.get<string | number>('PORT');\n  const globalPrefix = 'api';\n\n  // Инициализируем глобальный префикс для всех REST'ов\n  app.setGlobalPrefix(globalPrefix);\n\n  // Инициализируем глобальную валидацию всех входящих данных через DTO\n  app.useGlobalPipes(new ValidationPipe());\n\n  // Стартуем сервер\n  await app.listen(port);\n  Logger.log(`Сервер запущен в режиме \"${process.env.NODE_ENV}\" на: http://localhost:${port}/${globalPrefix}`);\n}\n\nbootstrap().catch((err) => {\n  Logger.error(`При запуске сервера возникла ошибка:`, `main.boostrap()`);\n  console.error(err);\n});\n"],"names":[],"sourceRoot":""}